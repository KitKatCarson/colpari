/*!
Chosen, a Select Box Enhancer for jQuery and Prototype
by Patrick Filler for Harvest, http://getharvest.com

Version 1.4.2
Full source at https://github.com/harvesthq/chosen
Copyright (c) 2011-2015 Harvest http://getharvest.com

MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
This file is generated by `grunt build`, do not edit it by hand.
*/

(function() {
  var $, AbstractChosen, Chosen, SelectParser, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SelectParser = (function() {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: this.escapeExpression(group.label),
        title: group.title ? group.title : void 0,
        children: 0,
        disabled: group.disabled,
        classes: group.className
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            title: option.title ? option.title : void 0,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            group_label: group_position != null ? this.parsed[group_position].label : null,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    SelectParser.prototype.escapeExpression = function(text) {
      var map, unsafe_chars;
      if ((text == null) || text === false) {
        return "";
      }
      if (!/[\&\<\>\"\'\`]/.test(text)) {
        return text;
      }
      map = {
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
      };
      unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
      return text.replace(unsafe_chars, function(chr) {
        return map[chr] || "&amp;";
      });
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  AbstractChosen = (function() {
    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.on_ready();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.group_search = this.options.group_search != null ? this.options.group_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      this.inherit_select_classes = this.options.inherit_select_classes || false;
      this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
      this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
      return this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
    };

    AbstractChosen.prototype.choice_label = function(item) {
      if (this.include_group_label_in_selected && (item.group_label != null)) {
        return "<b class='group-name'>" + item.group_label + "</b>" + item.html;
      } else {
        return item.html;
      }
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout((function() {
            return _this.container_mousedown();
          }), 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.results_option_build = function(options) {
      var content, data, _i, _len, _ref;
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else {
          content += this.result_add_option(data);
        }
        if (options != null ? options.first : void 0) {
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.single_set_selected_text(this.choice_label(data));
          }
        }
      }
      return content;
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, option_el;
      if (!option.search_match) {
        return '';
      }
      if (!this.include_option_in_results(option)) {
        return '';
      }
      classes = [];
      if (!option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("active-result");
      }
      if (option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("disabled-result");
      }
      if (option.selected) {
        classes.push("result-selected");
      }
      if (option.group_array_index != null) {
        classes.push("group-option");
      }
      if (option.classes !== "") {
        classes.push(option.classes);
      }
      option_el = document.createElement("li");
      option_el.className = classes.join(" ");
      option_el.style.cssText = option.style;
      option_el.setAttribute("data-option-array-index", option.array_index);
      option_el.innerHTML = option.search_text;
      if (option.title) {
        option_el.title = option.title;
      }
      return this.outerHTML(option_el);
    };

    AbstractChosen.prototype.result_add_group = function(group) {
      var classes, group_el;
      if (!(group.search_match || group.group_match)) {
        return '';
      }
      if (!(group.active_options > 0)) {
        return '';
      }
      classes = [];
      classes.push("group-result");
      if (group.classes) {
        classes.push(group.classes);
      }
      group_el = document.createElement("li");
      group_el.className = classes.join(" ");
      group_el.innerHTML = group.search_text;
      if (group.title) {
        group_el.title = group.title;
      }
      return this.outerHTML(group_el);
    };

    AbstractChosen.prototype.results_update_field = function() {
      this.set_default_text();
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.results_build();
      if (this.results_showing) {
        return this.winnow_results();
      }
    };

    AbstractChosen.prototype.reset_single_select_options = function() {
      var result, _i, _len, _ref, _results;
      _ref = this.results_data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        if (result.selected) {
          _results.push(result.selected = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.winnow_results = function() {
      var escapedSearchText, option, regex, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.get_search_text();
      escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      zregex = new RegExp(escapedSearchText, 'i');
      regex = this.get_search_regex(escapedSearchText);
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        option.search_match = false;
        results_group = null;
        if (this.include_option_in_results(option)) {
          if (option.group) {
            option.group_match = false;
            option.active_options = 0;
          }
          if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {
            results_group = this.results_data[option.group_array_index];
            if (results_group.active_options === 0 && results_group.search_match) {
              results += 1;
            }
            results_group.active_options += 1;
          }
          option.search_text = option.group ? option.label : option.html;
          if (!(option.group && !this.group_search)) {
            option.search_match = this.search_string_match(option.search_text, regex);
            if (option.search_match && !option.group) {
              results += 1;
            }
            if (option.search_match) {
              if (searchText.length) {
                startpos = option.search_text.search(zregex);
                text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
                option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              }
              if (results_group != null) {
                results_group.group_match = true;
              }
            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
              option.search_match = true;
            }
          }
        }
      }
      this.result_clear_highlight();
      if (results < 1 && searchText.length) {
        this.update_results_content("");
        return this.no_results(searchText);
      } else {
        this.update_results_content(this.results_option_build());
        return this.winnow_results_set_highlight();
      }
    };

    AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {
      var regex_anchor;
      regex_anchor = this.search_contains ? "" : "^";
      return new RegExp(regex_anchor + escaped_search_string, 'i');
    };

    AbstractChosen.prototype.search_string_match = function(search_string, regex) {
      var part, parts, _i, _len;
      if (regex.test(search_string)) {
        return true;
      } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
        parts = search_string.replace(/\[|\]/g, "").split(" ");
        if (parts.length) {
          for (_i = 0, _len = parts.length; _i < _len; _i++) {
            part = parts[_i];
            if (regex.test(part)) {
              return true;
            }
          }
        }
      }
    };

    AbstractChosen.prototype.choices_count = function() {
      var option, _i, _len, _ref;
      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      this.selected_option_count = 0;
      _ref = this.form_field.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };

    AbstractChosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (!(this.results_showing || this.is_disabled)) {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.clipboard_event_checker = function(evt) {
      var _this = this;
      return setTimeout((function() {
        return _this.results_search();
      }), 50);
    };

    AbstractChosen.prototype.container_width = function() {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return "" + this.form_field.offsetWidth + "px";
      }
    };

    AbstractChosen.prototype.include_option_in_results = function(option) {
      if (this.is_multiple && (!this.display_selected_options && option.selected)) {
        return false;
      }
      if (!this.display_disabled_options && option.disabled) {
        return false;
      }
      if (option.empty) {
        return false;
      }
      return true;
    };

    AbstractChosen.prototype.search_results_touchstart = function(evt) {
      this.touch_started = true;
      return this.search_results_mouseover(evt);
    };

    AbstractChosen.prototype.search_results_touchmove = function(evt) {
      this.touch_started = false;
      return this.search_results_mouseout(evt);
    };

    AbstractChosen.prototype.search_results_touchend = function(evt) {
      if (this.touch_started) {
        return this.search_results_mouseup(evt);
      }
    };

    AbstractChosen.prototype.outerHTML = function(element) {
      var tmp;
      if (element.outerHTML) {
        return element.outerHTML;
      }
      tmp = document.createElement("div");
      tmp.appendChild(element);
      return tmp.innerHTML;
    };

    AbstractChosen.browser_is_supported = function() {
      if (window.navigator.appName === "Microsoft Internet Explorer") {
        return document.documentMode >= 8;
      }
      if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
        return false;
      }
      if (/Android/i.test(window.navigator.userAgent)) {
        if (/Mobile/i.test(window.navigator.userAgent)) {
          return false;
        }
      }
      return true;
    };

    AbstractChosen.default_multiple_text = "Select Some Options";

    AbstractChosen.default_single_text = "Select an Option";

    AbstractChosen.default_no_result_text = "No results match";

    return AbstractChosen;

  })();

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function(input_field) {
        var $this, chosen;
        $this = $(this);
        chosen = $this.data('chosen');
        if (options === 'destroy' && chosen instanceof Chosen) {
          chosen.destroy();
        } else if (!(chosen instanceof Chosen)) {
          $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {
    __extends(Chosen, _super);

    function Chosen() {
      _ref = Chosen.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl");
    };

    Chosen.prototype.set_up_html = function() {
      var container_classes, container_props;
      container_classes = ["chosen-container"];
      container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chosen-rtl");
      }
      container_props = {
        'class': container_classes.join(' '),
        'style': "width: " + (this.container_width()) + ";",
        'title': this.form_field.title
      };
      if (this.form_field.id.length) {
        container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
      }
      this.container = $("<div />", container_props);
      if (this.is_multiple) {
        this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>');
      } else {
        this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>');
      }
      this.form_field_jq.hide().after(this.container);
      this.dropdown = this.container.find('div.chosen-drop').first();
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chosen-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chosen-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chosen-search').first();
        this.selected_item = this.container.find('.chosen-single').first();
      }
      this.results_build();
      this.set_tab_index();
      return this.set_label_behavior();
    };

    Chosen.prototype.on_ready = function() {
      return this.form_field_jq.trigger("chosen:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.bind('touchstart.chosen', function(evt) {
        _this.container_mousedown(evt);
        return evt.preventDefault();
      });
      this.container.bind('touchend.chosen', function(evt) {
        _this.container_mouseup(evt);
        return evt.preventDefault();
      });
      this.container.bind('mousedown.chosen', function(evt) {
        _this.container_mousedown(evt);
      });
      this.container.bind('mouseup.chosen', function(evt) {
        _this.container_mouseup(evt);
      });
      this.container.bind('mouseenter.chosen', function(evt) {
        _this.mouse_enter(evt);
      });
      this.container.bind('mouseleave.chosen', function(evt) {
        _this.mouse_leave(evt);
      });
      this.search_results.bind('mouseup.chosen', function(evt) {
        _this.search_results_mouseup(evt);
      });
      this.search_results.bind('mouseover.chosen', function(evt) {
        _this.search_results_mouseover(evt);
      });
      this.search_results.bind('mouseout.chosen', function(evt) {
        _this.search_results_mouseout(evt);
      });
      this.search_results.bind('mousewheel.chosen DOMMouseScroll.chosen', function(evt) {
        _this.search_results_mousewheel(evt);
      });
      this.search_results.bind('touchstart.chosen', function(evt) {
        _this.search_results_touchstart(evt);
      });
      this.search_results.bind('touchmove.chosen', function(evt) {
        _this.search_results_touchmove(evt);
      });
      this.search_results.bind('touchend.chosen', function(evt) {
        _this.search_results_touchend(evt);
      });
      this.form_field_jq.bind("chosen:updated.chosen", function(evt) {
        _this.results_update_field(evt);
      });
      this.form_field_jq.bind("chosen:activate.chosen", function(evt) {
        _this.activate_field(evt);
      });
      this.form_field_jq.bind("chosen:open.chosen", function(evt) {
        _this.container_mousedown(evt);
      });
      this.form_field_jq.bind("chosen:close.chosen", function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind('blur.chosen', function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind('keyup.chosen', function(evt) {
        _this.keyup_checker(evt);
      });
      this.search_field.bind('keydown.chosen', function(evt) {
        _this.keydown_checker(evt);
      });
      this.search_field.bind('focus.chosen', function(evt) {
        _this.input_focus(evt);
      });
      this.search_field.bind('cut.chosen', function(evt) {
        _this.clipboard_event_checker(evt);
      });
      this.search_field.bind('paste.chosen', function(evt) {
        _this.clipboard_event_checker(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.bind('click.chosen', function(evt) {
          _this.choices_click(evt);
        });
      } else {
        return this.container.bind('click.chosen', function(evt) {
          evt.preventDefault();
        });
      }
    };

    Chosen.prototype.destroy = function() {
      $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
      if (this.search_field[0].tabIndex) {
        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
      }
      this.container.remove();
      this.form_field_jq.removeData('chosen');
      return this.form_field_jq.show();
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass('chosen-disabled');
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus.chosen", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chosen-disabled');
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus.chosen", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      if (!this.is_disabled) {
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(this.container[0].ownerDocument).bind('click.chosen', this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.search_results_mousewheel = function(evt) {
      var delta;
      if (evt.originalEvent) {
        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
      }
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === 'DOMMouseScroll') {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chosen-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chosen-container-active");
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      this.container.addClass("chosen-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      var active_container;
      active_container = $(evt.target).closest('.chosen-container');
      if (active_container.length && this.container[0] === active_container[0]) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      this.parsing = true;
      this.selected_option_count = null;
      this.results_data = SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        this.search_choices.find("li.search-choice").remove();
      } else if (!this.is_multiple) {
        this.single_set_selected_text();
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.search_field[0].readOnly = true;
          this.container.addClass("chosen-container-single-nosearch");
        } else {
          this.search_field[0].readOnly = false;
          this.container.removeClass("chosen-container-single-nosearch");
        }
      }
      this.update_results_content(this.results_option_build({
        first: true
      }));
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      return this.parsing = false;
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        this.form_field_jq.trigger("chosen:maxselected", {
          chosen: this
        });
        return false;
      }
      this.container.addClass("chosen-with-drop");
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      this.winnow_results();
      return this.form_field_jq.trigger("chosen:showing_dropdown", {
        chosen: this
      });
    };

    Chosen.prototype.update_results_content = function(content) {
      return this.search_results.html(content);
    };

    Chosen.prototype.results_hide = function() {
      if (this.results_showing) {
        this.result_clear_highlight();
        this.container.removeClass("chosen-with-drop");
        this.form_field_jq.trigger("chosen:hiding_dropdown", {
          chosen: this
        });
      }
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field.tabIndex) {
        ti = this.form_field.tabIndex;
        this.form_field.tabIndex = -1;
        return this.search_field[0].tabIndex = ti;
      }
    };

    Chosen.prototype.set_label_behavior = function() {
      var _this = this;
      this.form_field_label = this.form_field_jq.parents("label");
      if (!this.form_field_label.length && this.form_field.id.length) {
        this.form_field_label = $("label[for='" + this.form_field.id + "']");
      }
      if (this.form_field_label.length > 0) {
        return this.form_field_label.bind('click.chosen', function(evt) {
          if (_this.is_multiple) {
            return _this.container_mousedown(evt);
          } else {
            return _this.activate_field();
          }
        });
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice, close_link,
        _this = this;
      choice = $('<li />', {
        "class": "search-choice"
      }).html("<span>" + (this.choice_label(item)) + "</span>");
      if (item.disabled) {
        choice.addClass('search-choice-disabled');
      } else {
        close_link = $('<a />', {
          "class": 'search-choice-close',
          'data-option-array-index': item.array_index
        });
        close_link.bind('click.chosen', function(evt) {
          return _this.choice_destroy_link_click(evt);
        });
        choice.append(close_link);
      }
      return this.search_container.before(choice);
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy($(evt.target));
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
        this.show_search_field_default();
        if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
          this.results_hide();
        }
        link.parents('li').first().remove();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.reset_single_select_options();
      this.form_field.options[0].selected = true;
      this.single_set_selected_text();
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, item;
      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
          this.form_field_jq.trigger("chosen:maxselected", {
            chosen: this
          });
          return false;
        }
        if (this.is_multiple) {
          high.removeClass("active-result");
        } else {
          this.reset_single_select_options();
        }
        high.addClass("result-selected");
        item = this.results_data[high[0].getAttribute("data-option-array-index")];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        this.selected_option_count = null;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.single_set_selected_text(this.choice_label(item));
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.val("");
        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
          this.form_field_jq.trigger("change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        evt.preventDefault();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.single_set_selected_text = function(text) {
      if (text == null) {
        text = this.default_text;
      }
      if (text === this.default_text) {
        this.selected_item.addClass("chosen-default");
      } else {
        this.single_deselect_control_build();
        this.selected_item.removeClass("chosen-default");
      }
      return this.selected_item.find("span").html(text);
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        this.selected_option_count = null;
        this.result_clear_highlight();
        if (this.results_showing) {
          this.winnow_results();
        }
        this.form_field_jq.trigger("change", {
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (!this.allow_single_deselect) {
        return;
      }
      if (!this.selected_item.find("abbr").length) {
        this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
      return this.selected_item.addClass("chosen-single-with-deselect");
    };

    Chosen.prototype.get_search_text = function() {
      return $('<div/>').text($.trim(this.search_field.val())).html();
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
      do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
      if (do_high != null) {
        return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;
      no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      no_results_html.find("span").first().html(terms);
      this.search_results.append(no_results_html);
      return this.form_field_jq.trigger("chosen:no_results", {
        chosen: this
      });
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var next_sib;
      if (this.results_showing && this.result_highlight) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          return this.result_do_highlight(next_sib);
        }
      } else {
        return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices_count() > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref1;
      stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          if (this.results_showing) {
            evt.preventDefault();
          }
          break;
        case 32:
          if (this.disable_search) {
            evt.preventDefault();
          }
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          evt.preventDefault();
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var div, f_width, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        f_width = this.container.outerWidth();
        if (w > f_width - 10) {
          w = f_width - 10;
        }
        return this.search_field.css({
          'width': w + 'px'
        });
      }
    };

    return Chosen;

  })(AbstractChosen);

}).call(this);
;/*! Copyright 2012, Ben Lin (http://dreamerslab.com/)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 1.0.16
 *
 * Requires: jQuery >= 1.2.3
 */
;( function ( $ ){
  $.fn.addBack = $.fn.addBack || $.fn.andSelf;

  $.fn.extend({

    actual : function ( method, options ){
      // check if the jQuery method exist
      if( !this[ method ]){
        throw '$.actual => The jQuery method "' + method + '" you called does not exist';
      }

      var defaults = {
        absolute      : false,
        clone         : false,
        includeMargin : false
      };

      var configs = $.extend( defaults, options );

      var $target = this.eq( 0 );
      var fix, restore;

      if( configs.clone === true ){
        fix = function (){
          var style = 'position: absolute !important; top: -1000 !important; ';

          // this is useful with css3pie
          $target = $target.
            clone().
            attr( 'style', style ).
            appendTo( 'body' );
        };

        restore = function (){
          // remove DOM element after getting the width
          $target.remove();
        };
      }else{
        var tmp   = [];
        var style = '';
        var $hidden;

        fix = function (){
          // get all hidden parents
          $hidden = $target.parents().addBack().filter( ':hidden' );
          style   += 'visibility: hidden !important; display: block !important; ';

          if( configs.absolute === true ) style += 'position: absolute !important; ';

          // save the origin style props
          // set the hidden el css to be got the actual value later
          $hidden.each( function (){
            // Save original style. If no style was set, attr() returns undefined
            var $this     = $( this );
            var thisStyle = $this.attr( 'style' );

            tmp.push( thisStyle );
            // Retain as much of the original style as possible, if there is one
            $this.attr( 'style', thisStyle ? thisStyle + ';' + style : style );
          });
        };

        restore = function (){
          // restore origin style values
          $hidden.each( function ( i ){
            var $this = $( this );
            var _tmp  = tmp[ i ];

            if( _tmp === undefined ){
              $this.removeAttr( 'style' );
            }else{
              $this.attr( 'style', _tmp );
            }
          });
        };
      }

      fix();
      // get the actual value with user specific methed
      // it can be 'width', 'height', 'outerWidth', 'innerWidth'... etc
      // configs.includeMargin only works for 'outerWidth' and 'outerHeight'
      var actual = /(outer)/.test( method ) ?
        $target[ method ]( configs.includeMargin ) :
        $target[ method ]();

      restore();
      // IMPORTANT, this plugin only return the value of the first element
      return actual;
    }
  });
})( jQuery );
;/**
 * jQuery Interdependencies library
 *
 * http://miohtama.github.com/jquery-interdependencies/
 *
 * Copyright 2012-2013 Mikko Ohtamaa, others
 */

/*global console, window*/

(function($) {

    "use strict";

    /**
     * Microsoft safe helper to spit out our little diagnostics information
     *
     * @ignore
     */
    function log(msg) {
        if(window.console && window.console.log) {
            console.log(msg);
        }
    }


    /**
     * jQuery.find() workaround for IE7
     *
     * If your selector is an pure tag id (#foo) IE7 finds nothing
     * if you do jQuery.find() in a specific jQuery context.
     *
     * This workaround makes a (false) assumptions
     * ids are always unique across the page.
     *
     * @ignore
     *
     * @param  {jQuery} context  jQuery context where we look child elements
     * @param  {String} selector selector as a string
     * @return {jQuery}          context.find() result
     */
    function safeFind(context, selector) {

        if(selector[0] == "#") {

            // Pseudo-check that this is a simple id selector
            // and not a complex jQuery selector
            if(selector.indexOf(" ") < 0) {
                return $(selector);
            }
        }

        return context.find(selector);
    }

    /**
     * Sample configuration object which can be passed to {@link jQuery.deps#enable}
     *
     * @class Configuration
     */
    var configExample = {

        /**
         * @cfg show Callback function show(elem) for showing elements
         * @type {Function}
         */
        show : null,

        /**
         * @cfg hide Callback function hide(elem) for hiding elements
         * @type {Function}
         */
        hide : null,

        /**
         * @cfg log Write console.log() output of rule applying
         * @type {Boolean}
         */
        log : false,


        /**
         * @cfg checkTargets When ruleset is enabled, check that all controllers and controls referred by ruleset exist on the page.
         *
         * @default true
         *
         * @type {Boolean}
         */
        checkTargets : true

    };

    /**
     * Define one field inter-dependency rule.
     *
     * When condition is true then this input and all
     * its children rules' inputs are visible.
     *
     * Possible condition strings:
     *
     *  * **==**  Widget value must be equal to given value
     *
     *  * **any** Widget value must be any of the values in the given value array
     *
     *  * **non-any** Widget value must not be any of the values in the given value array
     *
     *  * **!=** Widget value must not be qual to given value
     *
     *  * **()** Call value as a function(context, controller, ourWidgetValue) and if it's true then the condition is true
     *
     *  * **null** This input does not have any sub-conditions
     *
     *
     *
     */
    function Rule(controller, condition, value) {
        this.init(controller, condition, value);
    }

    $.extend(Rule.prototype, {

        /**
         * @method constructor
         *
         * @param {String} controller     jQuery expression to match the `<input>`   source
         *
         * @param {String} condition What input value must be that {@link Rule the rule takes effective}.
         *
         * @param value Matching value of **controller** when widgets become visible
         *
         */
        init : function(controller, condition, value) {
            this.controller = controller;

            this.condition = condition;

            this.value = value;

            // Child rules
            this.rules = [];

            // Controls shown/hidden by this rule
            this.controls = [];
        },

        /**
         * Evaluation engine
         *
         * @param  {String} condition Any of given conditions in Rule class description
         * @param  {Object} val1      The base value we compare against
         * @param  {Object} val2      Something we got out of input
         * @return {Boolean}          true or false
         */
        evalCondition : function(context, control, condition, val1, val2) {

          /**
           *
           * Codestar Framework
           * Added new condition for Codestar Framework
           *
           * @since 1.0.0
           * @version 1.0.0
           *
           */
          if(condition == "==") {
            return this.checkBoolean(val1) == this.checkBoolean(val2);
          } else if(condition == "!=") {
            return this.checkBoolean(val1) != this.checkBoolean(val2);
          } else if(condition == ">=") {
            return Number(val2) >= Number(val1);
          } else if(condition == "<=") {
            return Number(val2) <= Number(val1);
          } else if(condition == ">") {
            return Number(val2) > Number(val1);
          } else if(condition == "<") {
            return Number(val2) < Number(val1);
          } else if(condition == "()") {
            return window[val1](context, control, val2); // FIXED: function method
          } else if(condition == "any") {
            return $.inArray(val2, val1.split(',')) > -1;
          } else if(condition == "not-any") {
            return $.inArray(val2, val1.split(',')) == -1;
          } else {
            throw new Error("Unknown condition:" + condition);
          }

        },

        /**
         *
         * Codestar Framework
         * Added Boolean value type checker
         *
         * @since 1.0.0
         * @version 1.0.0
         *
         */
        checkBoolean: function(value) {

          switch(value) {

            case true:
            case 'true':
            case 1:
            case '1':
            //case 'on':
            //case 'yes':
              value = true;
            break;

            case false:
            case 'false':
            case 0:
            case '0':
            //case 'off':
            //case 'no':
              value = false;
            break;

          }

          return value;
        },

        /**
         * Evaluate the condition of this rule in given jQuery context.
         *
         * The widget value is extracted using getControlValue()
         *
         * @param {jQuery} context The jQuery selection in which this rule is evaluated.
         *
         */
        checkCondition : function(context, cfg) {

            // We do not have condition set, we are always true
            if(!this.condition) {
                return true;
            }

            var control = context.find(this.controller);
            if(control.size() === 0 && cfg.log) {
                log("Evaling condition: Could not find controller input " + this.controller);
            }

            var val = this.getControlValue(context, control);
            if(cfg.log && val === undefined) {
                log("Evaling condition: Could not exctract value from input " + this.controller);
            }

            if(val === undefined) {
                return false;
            }

            val = this.normalizeValue(control, this.value, val);

            return this.evalCondition(context, control, this.condition, this.value, val);
        },

        /**
         * Make sure that what we read from input field is comparable against Javascript primitives
         *
         */
        normalizeValue : function(control, baseValue, val) {

            if(typeof baseValue == "number") {
                // Make sure we compare numbers against numbers
                return parseFloat(val);
            }

            return val;
        },

        /**
         * Read value from a diffent HTML controls.
         *
         * Handle, text, checkbox, radio, select.
         *
         */
        getControlValue : function(context, control) {

          /**
           *
           * Codestar Framework
           * Added multiple checkbox value control
           *
           * @since 1.0.0
           * @version 1.0.0
           *
           */
          if( ( control.attr("type") == "radio" || control.attr("type") == "checkbox" ) && control.size() > 1 ) {
            return control.filter(":checked").val();
          }

          // Handle individual checkboxes & radio
          if ( control.attr("type") == "checkbox" || control.attr("type") == "radio" ) {
            return control.is(":checked");
          }

          return control.val();

        },

        /**
         * Create a sub-rule.
         *
         * Example:
         *
         *      var masterSwitch = ruleset.createRule("#mechanicalThrombectomyDevice")
         *      var twoAttempts = masterSwitch.createRule("#numberOfAttempts", "==", 2);
         *
         * @return Rule instance
         */
        createRule : function(controller, condition, value) {
            var rule = new Rule(controller, condition, value);
            this.rules.push(rule);
            return rule;
        },

        /**
         * Include a control in this rule.
         *
         * @param  {String} input     jQuery expression to match the input within ruleset context
         */
        include : function(input) {

            if(!input) {
                throw new Error("Must give an input selector");
            }

            this.controls.push(input);
        },

        /**
         * Apply this rule to all controls in the given context
         *
         * @param  {jQuery} context  jQuery selection within we operate
         * @param  {Object} cfg      {@link Configuration} object or undefined
         * @param  {Object} enforced Recursive rule enforcer: undefined to evaluate condition, true show always, false hide always
         *
         */
        applyRule : function(context, cfg, enforced) {

            var result;

            if(enforced === undefined) {
                result = this.checkCondition(context, cfg);
            } else {
                result = enforced;
            }

            if(cfg.log) {
                log("Applying rule on " + this.controller + "==" + this.value + " enforced:" + enforced + " result:" + result);
            }

            if(cfg.log && !this.controls.length) {
                log("Zero length controls slipped through");
            }

            // Get show/hide callback functions

            var show = cfg.show || function(control) {
                control.show();
            };

            var hide = cfg.hide || function(control) {
                control.hide();
            };


            // Resolve controls from ids to jQuery selections
            // we are controlling in this context
            var controls = $.map(this.controls, function(elem, idx) {
                var control = context.find(elem);
                if(cfg.log && control.size() === 0) {
                    log("Could not find element:" + elem);
                }
                return control;
            });

            if(result) {

                $(controls).each(function() {


                    // Some friendly debug info
                    if(cfg.log && $(this).size() === 0) {
                        log("Control selection is empty when showing");
                        log(this);
                    }

                    show(this);
                });

                // Evaluate all child rules
                $(this.rules).each(function() {
                    this.applyRule(context, cfg);
                });

            } else {

                $(controls).each(function() {

                    // Some friendly debug info
                    if(cfg.log && $(this).size() === 0) {
                        log("Control selection is empty when hiding:");
                        log(this);
                    }

                    hide(this);
                });

                // Supress all child rules
                $(this.rules).each(function() {
                    this.applyRule(context, cfg, false);
                });
            }
        }
    });

    /**
     * A class which manages interdependenice rules.
     */
    function Ruleset() {

        // Hold a tree of rules
        this.rules = [];
    }

    $.extend(Ruleset.prototype, {

        /**
         * Add a new rule into this ruletset.
         *
         * See  {@link Rule} about the contstruction parameters.
         * @return {Rule}
         */
        createRule : function(controller, condition, value) {
            var rule = new Rule(controller, condition, value);
            this.rules.push(rule);
            return rule;
        },

        /**
         * Apply these rules on an element.
         *
         * @param {jQuery} context Selection we are dealing with
         *
         * @param cfg {@link Configuration} object or undefined.
         */
        applyRules: function(context, cfg) {
            var i;

            cfg = cfg || {};

            if(cfg.log) {
                log("Starting evaluation ruleset of " + this.rules.length + " rules");
            }

            for(i=0; i<this.rules.length; i++) {
                this.rules[i].applyRule(context, cfg);
            }
        },

        /**
         * Walk all rules and sub-rules in this ruleset
         * @param  {Function} callback(rule)
         *
         * @return {Array} Rules as depth-first searched
         */
        walk : function() {

            var rules = [];

            function descent(rule) {

                rules.push(rule);

                $(rule.children).each(function() {
                    descent(this);
                });
            }

            $(this.rules).each(function() {
                descent(this);
            });

            return rules;
        },


        /**
         * Check that all controllers and controls referred in ruleset exist.
         *
         * Throws an Error if any of them are missing.
         *
         * @param {jQuery} context jQuery selection of items
         *
         * @param  {Configuration} cfg
         */
        checkTargets : function(context, cfg) {

            var controls = 0;
            var rules = this.walk();

            $(rules).each(function() {

                if(context.find(this.controller).size() === 0) {
                    throw new Error("Rule's controller does not exist:" + this.controller);
                }

                if(this.controls.length === 0) {
                    throw new Error("Rule has no controls:" + this);
                }

                $(this.controls).each(function() {

                    if(safeFind(context, this) === 0) {
                        throw new Error("Rule's target control " + this + " does not exist in context " + context.get(0));
                    }

                    controls++;
                });

            });

            if(cfg.log) {
                log("Controller check ok, rules count " + rules.length + " controls count " + controls);
            }

        },

        /**
         * Make this ruleset effective on the whole page.
         *
         * Set event handler on **window.document** to catch all input events
         * and apply those events to defined rules.
         *
         * @param  {Configuration} cfg {@link Configuration} object or undefined
         *
         */
        install : function(cfg) {
            $.deps.enable($(document.body), this, cfg);
        }

    });

    /**
     * jQuery interdependencie plug-in
     *
     * @class jQuery.deps
     *
     */
    var deps = {

        /**
         * Create a new Ruleset instance.
         *
         * Example:
         *
         *      $(document).ready(function() {
         *           // Start creating a new ruleset
         *           var ruleset = $.deps.createRuleset();
         *
         *
         * @return {Ruleset}
         */
        createRuleset : function() {
            return new Ruleset();
        },


        /**
         * Enable ruleset on a specific jQuery selection.
         *
         * Checks the existince of all ruleset controllers and controls
         * by default (see config).
         *
         * See possible IE event bubbling problems: http://stackoverflow.com/q/265074/315168
         *
         * @param  {Object} selection jQuery selection in where we monitor all change events. All controls and controllers must exist within this selection.
         * @param  {Ruleset} ruleset
         * @param  {Configuration} cfg
         */
        enable : function(selection, ruleset, cfg) {

            cfg = cfg || {};

            if(cfg.checkTargets || cfg.checkTargets === undefined) {
                ruleset.checkTargets(selection, cfg);
            }

            var self = this;

            if(cfg.log) {
                log("Enabling dependency change monitoring on " + selection.get(0));
            }

            // Namespace our handler to avoid conflicts
            //
            var handler = function() { ruleset.applyRules(selection, cfg); };
            var val = selection.on ? selection.on("change.deps", null, null, handler) : selection.live("change.deps", handler);

            ruleset.applyRules(selection, cfg);

            return val;
        }
    };

    $.deps = deps;

})(jQuery);
;/* ========================================================================
 * Bootstrap: transition.js v3.3.4
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ========================================================================
 * Changed function name for avoid conflict
 * ======================================================================== */
+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.CSemulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.4
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ========================================================================
 * Changed function and class names for avoid conflict
 * ======================================================================== */
+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var CSTooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null

    this.init('cstooltip', element, options)
  }

  CSTooltip.VERSION  = '3.3.4'

  CSTooltip.TRANSITION_DURATION = 150

  CSTooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="cs-tooltip" role="tooltip"><div class="cs-tooltip-arrow"></div><div class="cs-tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  CSTooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport)

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  CSTooltip.prototype.getDefaults = function () {
    return CSTooltip.DEFAULTS
  }

  CSTooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  CSTooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  CSTooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (self && self.$tip && self.$tip.is(':visible')) {
      self.hoverState = 'in'
      return
    }

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  CSTooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  CSTooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var $container   = this.options.container ? $(this.options.container) : this.$element.parent()
        var containerDim = this.getPosition($container)

        placement = placement == 'bottom' && pos.bottom + actualHeight > containerDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < containerDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > containerDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < containerDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .CSemulateTransitionEnd(CSTooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  CSTooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  CSTooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  CSTooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.cs-tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  CSTooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .CSemulateTransitionEnd(CSTooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  CSTooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof ($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  CSTooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  CSTooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  CSTooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  CSTooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  CSTooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  CSTooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  CSTooltip.prototype.tip = function () {
    return (this.$tip = this.$tip || $(this.options.template))
  }

  CSTooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.cs-tooltip-arrow'))
  }

  CSTooltip.prototype.enable = function () {
    this.enabled = true
  }

  CSTooltip.prototype.disable = function () {
    this.enabled = false
  }

  CSTooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  CSTooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  CSTooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
    })
  }
  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.cstooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.cstooltip', (data = new CSTooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.cstooltip

  $.fn.cstooltip             = Plugin
  $.fn.cstooltip.Constructor = CSTooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.cstooltip.noConflict = function () {
    $.fn.cstooltip = old
    return this
  }

}(jQuery);














/*!
 * .closestDescendant( selector [, findAll ] )
 * https://github.com/tlindig/jquery-closest-descendant
 *
 * v0.1.2 - 2014-02-17
 *
 * Copyright (c) 2014 Tobias Lindig
 * http://tlindig.de/
 *
 * License: MIT
 *
 * Author: Tobias Lindig <dev@tlindig.de>
 */
(function($) {

    /**
     * Get the first element(s) that matches the selector by traversing down
     * through descendants in the DOM tree level by level. It use a breadth
     * first search (BFS), that mean it will stop search and not going deeper in
     * the current subtree if the first matching descendant was found.
     *
     * @param  {selectors} selector -required- a jQuery selector
     * @param  {boolean} findAll -optional- default is false, if true, every
     *                           subtree will be visited until first match
     * @return {jQuery} matched element(s)
     */
    $.fn.closestDescendant = function(selector, findAll) {

        if (!selector || selector === '') {
            return $();
        }

        findAll = findAll ? true : false;

        var resultSet = $();

        this.each(function() {

            var $this = $(this);

            // breadth first search for every matched node,
            // go deeper, until a child was found in the current subtree or the leave was reached.
            var queue = [];
            queue.push($this);
            while (queue.length > 0) {
                var node = queue.shift();
                var children = node.children();
                for (var i = 0; i < children.length; ++i) {
                    var $child = $(children[i]);
                    if ($child.is(selector)) {
                        resultSet.push($child[0]); //well, we found one
                        if (!findAll) {
                            return false; //stop processing
                        }
                    } else {
                        queue.push($child); //go deeper
                    }
                }
            }
        });

        return resultSet;
    };
})(jQuery);



















/*
 * jQuery serializeObject - v0.2 - 1/20/2010
 * http://benalman.com/projects/jquery-misc-plugins/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function($,a){$.fn.serializeObject=function(){var b={};$.each(this.serializeArray(),function(d,e){var f=e.name,c=e.value;b[f]=b[f]===a?c:$.isArray(b[f])?b[f].concat(c):[b[f],c]});return b}})(jQuery);



















/*! nouislider - 10.0.0 - 2017-05-28 14:52:48 */

(function (factory) {

    if ( typeof define === 'function' && define.amd ) {

        // AMD. Register as an anonymous module.
        define([], factory);

    } else if ( typeof exports === 'object' ) {

        // Node/CommonJS
        module.exports = factory();

    } else {

        // Browser globals
        window.noUiSlider = factory();
    }

}(function( ){

  'use strict';

  var VERSION = '10.0.0';


  function isValidFormatter ( entry ) {
    return typeof entry === 'object' && typeof entry.to === 'function' && typeof entry.from === 'function';
  }

  function removeElement ( el ) {
    el.parentElement.removeChild(el);
  }

  // Bindable version
  function preventDefault ( e ) {
    e.preventDefault();
  }

  // Removes duplicates from an array.
  function unique ( array ) {
    return array.filter(function(a){
      return !this[a] ? this[a] = true : false;
    }, {});
  }

  // Round a value to the closest 'to'.
  function closest ( value, to ) {
    return Math.round(value / to) * to;
  }

  // Current position of an element relative to the document.
  function offset ( elem, orientation ) {

    var rect = elem.getBoundingClientRect();
    var doc = elem.ownerDocument;
    var docElem = doc.documentElement;
    var pageOffset = getPageOffset(doc);

    // getBoundingClientRect contains left scroll in Chrome on Android.
    // I haven't found a feature detection that proves this. Worst case
    // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
    if ( /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) ) {
      pageOffset.x = 0;
    }

    return orientation ? (rect.top + pageOffset.y - docElem.clientTop) : (rect.left + pageOffset.x - docElem.clientLeft);
  }

  // Checks whether a value is numerical.
  function isNumeric ( a ) {
    return typeof a === 'number' && !isNaN( a ) && isFinite( a );
  }

  // Sets a class and removes it after [duration] ms.
  function addClassFor ( element, className, duration ) {
    if (duration > 0) {
    addClass(element, className);
      setTimeout(function(){
        removeClass(element, className);
      }, duration);
    }
  }

  // Limits a value to 0 - 100
  function limit ( a ) {
    return Math.max(Math.min(a, 100), 0);
  }

  // Wraps a variable as an array, if it isn't one yet.
  // Note that an input array is returned by reference!
  function asArray ( a ) {
    return Array.isArray(a) ? a : [a];
  }

  // Counts decimals
  function countDecimals ( numStr ) {
    numStr = String(numStr);
    var pieces = numStr.split(".");
    return pieces.length > 1 ? pieces[1].length : 0;
  }

  // http://youmightnotneedjquery.com/#add_class
  function addClass ( el, className ) {
    if ( el.classList ) {
      el.classList.add(className);
    } else {
      el.className += ' ' + className;
    }
  }

  // http://youmightnotneedjquery.com/#remove_class
  function removeClass ( el, className ) {
    if ( el.classList ) {
      el.classList.remove(className);
    } else {
      el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  }

  // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
  function hasClass ( el, className ) {
    return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
  }

  // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes
  function getPageOffset ( doc ) {

    var supportPageOffset = window.pageXOffset !== undefined;
    var isCSS1Compat = ((doc.compatMode || "") === "CSS1Compat");
    var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;
    var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;

    return {
      x: x,
      y: y
    };
  }

  // we provide a function to compute constants instead
  // of accessing window.* as soon as the module needs it
  // so that we do not compute anything if not needed
  function getActions ( ) {

    // Determine the events to bind. IE11 implements pointerEvents without
    // a prefix, which breaks compatibility with the IE10 implementation.
    return window.navigator.pointerEnabled ? {
      start: 'pointerdown',
      move: 'pointermove',
      end: 'pointerup'
    } : window.navigator.msPointerEnabled ? {
      start: 'MSPointerDown',
      move: 'MSPointerMove',
      end: 'MSPointerUp'
    } : {
      start: 'mousedown touchstart',
      move: 'mousemove touchmove',
      end: 'mouseup touchend'
    };
  }

  // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
  // Issue #785
  function getSupportsPassive ( ) {

    var supportsPassive = false;

    try {

      var opts = Object.defineProperty({}, 'passive', {
        get: function() {
          supportsPassive = true;
        }
      });

      window.addEventListener('test', null, opts);

    } catch (e) {}

    return supportsPassive;
  }

  function getSupportsTouchActionNone ( ) {
    return window.CSS && CSS.supports && CSS.supports('touch-action', 'none');
  }


// Value calculation

  // Determine the size of a sub-range in relation to a full range.
  function subRangeRatio ( pa, pb ) {
    return (100 / (pb - pa));
  }

  // (percentage) How many percent is this value of this range?
  function fromPercentage ( range, value ) {
    return (value * 100) / ( range[1] - range[0] );
  }

  // (percentage) Where is this value on this range?
  function toPercentage ( range, value ) {
    return fromPercentage( range, range[0] < 0 ?
      value + Math.abs(range[0]) :
        value - range[0] );
  }

  // (value) How much is this percentage on this range?
  function isPercentage ( range, value ) {
    return ((value * ( range[1] - range[0] )) / 100) + range[0];
  }


// Range conversion

  function getJ ( value, arr ) {

    var j = 1;

    while ( value >= arr[j] ){
      j += 1;
    }

    return j;
  }

  // (percentage) Input a value, find where, on a scale of 0-100, it applies.
  function toStepping ( xVal, xPct, value ) {

    if ( value >= xVal.slice(-1)[0] ){
      return 100;
    }

    var j = getJ( value, xVal ), va, vb, pa, pb;

    va = xVal[j-1];
    vb = xVal[j];
    pa = xPct[j-1];
    pb = xPct[j];

    return pa + (toPercentage([va, vb], value) / subRangeRatio (pa, pb));
  }

  // (value) Input a percentage, find where it is on the specified range.
  function fromStepping ( xVal, xPct, value ) {

    // There is no range group that fits 100
    if ( value >= 100 ){
      return xVal.slice(-1)[0];
    }

    var j = getJ( value, xPct ), va, vb, pa, pb;

    va = xVal[j-1];
    vb = xVal[j];
    pa = xPct[j-1];
    pb = xPct[j];

    return isPercentage([va, vb], (value - pa) * subRangeRatio (pa, pb));
  }

  // (percentage) Get the step that applies at a certain value.
  function getStep ( xPct, xSteps, snap, value ) {

    if ( value === 100 ) {
      return value;
    }

    var j = getJ( value, xPct ), a, b;

    // If 'snap' is set, steps are used as fixed points on the slider.
    if ( snap ) {

      a = xPct[j-1];
      b = xPct[j];

      // Find the closest position, a or b.
      if ((value - a) > ((b-a)/2)){
        return b;
      }

      return a;
    }

    if ( !xSteps[j-1] ){
      return value;
    }

    return xPct[j-1] + closest(
      value - xPct[j-1],
      xSteps[j-1]
    );
  }


// Entry parsing

  function handleEntryPoint ( index, value, that ) {

    var percentage;

    // Wrap numerical input in an array.
    if ( typeof value === "number" ) {
      value = [value];
    }

    // Reject any invalid input, by testing whether value is an array.
    if ( Object.prototype.toString.call( value ) !== '[object Array]' ){
      throw new Error("noUiSlider (" + VERSION + "): 'range' contains invalid value.");
    }

    // Covert min/max syntax to 0 and 100.
    if ( index === 'min' ) {
      percentage = 0;
    } else if ( index === 'max' ) {
      percentage = 100;
    } else {
      percentage = parseFloat( index );
    }

    // Check for correct input.
    if ( !isNumeric( percentage ) || !isNumeric( value[0] ) ) {
      throw new Error("noUiSlider (" + VERSION + "): 'range' value isn't numeric.");
    }

    // Store values.
    that.xPct.push( percentage );
    that.xVal.push( value[0] );

    // NaN will evaluate to false too, but to keep
    // logging clear, set step explicitly. Make sure
    // not to override the 'step' setting with false.
    if ( !percentage ) {
      if ( !isNaN( value[1] ) ) {
        that.xSteps[0] = value[1];
      }
    } else {
      that.xSteps.push( isNaN(value[1]) ? false : value[1] );
    }

    that.xHighestCompleteStep.push(0);
  }

  function handleStepPoint ( i, n, that ) {

    // Ignore 'false' stepping.
    if ( !n ) {
      return true;
    }

    // Factor to range ratio
    that.xSteps[i] = fromPercentage([
       that.xVal[i]
      ,that.xVal[i+1]
    ], n) / subRangeRatio (
      that.xPct[i],
      that.xPct[i+1] );

    var totalSteps = (that.xVal[i+1] - that.xVal[i]) / that.xNumSteps[i];
    var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
    var step = that.xVal[i] + (that.xNumSteps[i] * highestStep);

    that.xHighestCompleteStep[i] = step;
  }


// Interface

  function Spectrum ( entry, snap, singleStep ) {

    this.xPct = [];
    this.xVal = [];
    this.xSteps = [ singleStep || false ];
    this.xNumSteps = [ false ];
    this.xHighestCompleteStep = [];

    this.snap = snap;

    var index, ordered = [ /* [0, 'min'], [1, '50%'], [2, 'max'] */ ];

    // Map the object keys to an array.
    for ( index in entry ) {
      if ( entry.hasOwnProperty(index) ) {
        ordered.push([entry[index], index]);
      }
    }

    // Sort all entries by value (numeric sort).
    if ( ordered.length && typeof ordered[0][0] === "object" ) {
      ordered.sort(function(a, b) { return a[0][0] - b[0][0]; });
    } else {
      ordered.sort(function(a, b) { return a[0] - b[0]; });
    }


    // Convert all entries to subranges.
    for ( index = 0; index < ordered.length; index++ ) {
      handleEntryPoint(ordered[index][1], ordered[index][0], this);
    }

    // Store the actual step values.
    // xSteps is sorted in the same order as xPct and xVal.
    this.xNumSteps = this.xSteps.slice(0);

    // Convert all numeric steps to the percentage of the subrange they represent.
    for ( index = 0; index < this.xNumSteps.length; index++ ) {
      handleStepPoint(index, this.xNumSteps[index], this);
    }
  }

  Spectrum.prototype.getMargin = function ( value ) {

    var step = this.xNumSteps[0];

    if ( step && ((value / step) % 1) !== 0 ) {
      throw new Error("noUiSlider (" + VERSION + "): 'limit', 'margin' and 'padding' must be divisible by step.");
    }

    return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;
  };

  Spectrum.prototype.toStepping = function ( value ) {

    value = toStepping( this.xVal, this.xPct, value );

    return value;
  };

  Spectrum.prototype.fromStepping = function ( value ) {

    return fromStepping( this.xVal, this.xPct, value );
  };

  Spectrum.prototype.getStep = function ( value ) {

    value = getStep(this.xPct, this.xSteps, this.snap, value );

    return value;
  };

  Spectrum.prototype.getNearbySteps = function ( value ) {

    var j = getJ(value, this.xPct);

    return {
      stepBefore: { startValue: this.xVal[j-2], step: this.xNumSteps[j-2], highestStep: this.xHighestCompleteStep[j-2] },
      thisStep: { startValue: this.xVal[j-1], step: this.xNumSteps[j-1], highestStep: this.xHighestCompleteStep[j-1] },
      stepAfter: { startValue: this.xVal[j-0], step: this.xNumSteps[j-0], highestStep: this.xHighestCompleteStep[j-0] }
    };
  };

  Spectrum.prototype.countStepDecimals = function () {
    var stepDecimals = this.xNumSteps.map(countDecimals);
    return Math.max.apply(null, stepDecimals);
  };

  // Outside testing
  Spectrum.prototype.convert = function ( value ) {
    return this.getStep(this.toStepping(value));
  };

/*  Every input option is tested and parsed. This'll prevent
  endless validation in internal methods. These tests are
  structured with an item for every option available. An
  option can be marked as required by setting the 'r' flag.
  The testing function is provided with three arguments:
    - The provided value for the option;
    - A reference to the options object;
    - The name for the option;

  The testing function returns false when an error is detected,
  or true when everything is OK. It can also modify the option
  object, to make sure all values can be correctly looped elsewhere. */

  var defaultFormatter = { 'to': function( value ){
    return value !== undefined && value.toFixed(2);
  }, 'from': Number };

  function validateFormat ( entry ) {

    // Any object with a to and from method is supported.
    if ( isValidFormatter(entry) ) {
      return true;
    }

    throw new Error("noUiSlider (" + VERSION + "): 'format' requires 'to' and 'from' methods.");
  }

  function testStep ( parsed, entry ) {

    if ( !isNumeric( entry ) ) {
      throw new Error("noUiSlider (" + VERSION + "): 'step' is not numeric.");
    }

    // The step option can still be used to set stepping
    // for linear sliders. Overwritten if set in 'range'.
    parsed.singleStep = entry;
  }

  function testRange ( parsed, entry ) {

    // Filter incorrect input.
    if ( typeof entry !== 'object' || Array.isArray(entry) ) {
      throw new Error("noUiSlider (" + VERSION + "): 'range' is not an object.");
    }

    // Catch missing start or end.
    if ( entry.min === undefined || entry.max === undefined ) {
      throw new Error("noUiSlider (" + VERSION + "): Missing 'min' or 'max' in 'range'.");
    }

    // Catch equal start or end.
    if ( entry.min === entry.max ) {
      throw new Error("noUiSlider (" + VERSION + "): 'range' 'min' and 'max' cannot be equal.");
    }

    parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);
  }

  function testStart ( parsed, entry ) {

    entry = asArray(entry);

    // Validate input. Values aren't tested, as the public .val method
    // will always provide a valid location.
    if ( !Array.isArray( entry ) || !entry.length ) {
      throw new Error("noUiSlider (" + VERSION + "): 'start' option is incorrect.");
    }

    // Store the number of handles.
    parsed.handles = entry.length;

    // When the slider is initialized, the .val method will
    // be called with the start options.
    parsed.start = entry;
  }

  function testSnap ( parsed, entry ) {

    // Enforce 100% stepping within subranges.
    parsed.snap = entry;

    if ( typeof entry !== 'boolean' ){
      throw new Error("noUiSlider (" + VERSION + "): 'snap' option must be a boolean.");
    }
  }

  function testAnimate ( parsed, entry ) {

    // Enforce 100% stepping within subranges.
    parsed.animate = entry;

    if ( typeof entry !== 'boolean' ){
      throw new Error("noUiSlider (" + VERSION + "): 'animate' option must be a boolean.");
    }
  }

  function testAnimationDuration ( parsed, entry ) {

    parsed.animationDuration = entry;

    if ( typeof entry !== 'number' ){
      throw new Error("noUiSlider (" + VERSION + "): 'animationDuration' option must be a number.");
    }
  }

  function testConnect ( parsed, entry ) {

    var connect = [false];
    var i;

    // Map legacy options
    if ( entry === 'lower' ) {
      entry = [true, false];
    }

    else if ( entry === 'upper' ) {
      entry = [false, true];
    }

    // Handle boolean options
    if ( entry === true || entry === false ) {

      for ( i = 1; i < parsed.handles; i++ ) {
        connect.push(entry);
      }

      connect.push(false);
    }

    // Reject invalid input
    else if ( !Array.isArray( entry ) || !entry.length || entry.length !== parsed.handles + 1 ) {
      throw new Error("noUiSlider (" + VERSION + "): 'connect' option doesn't match handle count.");
    }

    else {
      connect = entry;
    }

    parsed.connect = connect;
  }

  function testOrientation ( parsed, entry ) {

    // Set orientation to an a numerical value for easy
    // array selection.
    switch ( entry ){
      case 'horizontal':
      parsed.ort = 0;
      break;
      case 'vertical':
      parsed.ort = 1;
      break;
      default:
      throw new Error("noUiSlider (" + VERSION + "): 'orientation' option is invalid.");
    }
  }

  function testMargin ( parsed, entry ) {

    if ( !isNumeric(entry) ){
      throw new Error("noUiSlider (" + VERSION + "): 'margin' option must be numeric.");
    }

    // Issue #582
    if ( entry === 0 ) {
      return;
    }

    parsed.margin = parsed.spectrum.getMargin(entry);

    if ( !parsed.margin ) {
      throw new Error("noUiSlider (" + VERSION + "): 'margin' option is only supported on linear sliders.");
    }
  }

  function testLimit ( parsed, entry ) {

    if ( !isNumeric(entry) ){
      throw new Error("noUiSlider (" + VERSION + "): 'limit' option must be numeric.");
    }

    parsed.limit = parsed.spectrum.getMargin(entry);

    if ( !parsed.limit || parsed.handles < 2 ) {
      throw new Error("noUiSlider (" + VERSION + "): 'limit' option is only supported on linear sliders with 2 or more handles.");
    }
  }

  function testPadding ( parsed, entry ) {

    if ( !isNumeric(entry) ){
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be numeric.");
    }

    if ( entry === 0 ) {
      return;
    }

    parsed.padding = parsed.spectrum.getMargin(entry);

    if ( !parsed.padding ) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option is only supported on linear sliders.");
    }

    if ( parsed.padding < 0 ) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be a positive number.");
    }

    if ( parsed.padding >= 50 ) {
      throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be less than half the range.");
    }
  }

  function testDirection ( parsed, entry ) {

    // Set direction as a numerical value for easy parsing.
    // Invert connection for RTL sliders, so that the proper
    // handles get the connect/background classes.
    switch ( entry ) {
      case 'ltr':
      parsed.dir = 0;
      break;
      case 'rtl':
      parsed.dir = 1;
      break;
      default:
      throw new Error("noUiSlider (" + VERSION + "): 'direction' option was not recognized.");
    }
  }

  function testBehaviour ( parsed, entry ) {

    // Make sure the input is a string.
    if ( typeof entry !== 'string' ) {
      throw new Error("noUiSlider (" + VERSION + "): 'behaviour' must be a string containing options.");
    }

    // Check if the string contains any keywords.
    // None are required.
    var tap = entry.indexOf('tap') >= 0;
    var drag = entry.indexOf('drag') >= 0;
    var fixed = entry.indexOf('fixed') >= 0;
    var snap = entry.indexOf('snap') >= 0;
    var hover = entry.indexOf('hover') >= 0;

    if ( fixed ) {

      if ( parsed.handles !== 2 ) {
        throw new Error("noUiSlider (" + VERSION + "): 'fixed' behaviour must be used with 2 handles");
      }

      // Use margin to enforce fixed state
      testMargin(parsed, parsed.start[1] - parsed.start[0]);
    }

    parsed.events = {
      tap: tap || snap,
      drag: drag,
      fixed: fixed,
      snap: snap,
      hover: hover
    };
  }

  function testTooltips ( parsed, entry ) {

    if ( entry === false ) {
      return;
    }

    else if ( entry === true ) {

      parsed.tooltips = [];

      for ( var i = 0; i < parsed.handles; i++ ) {
        parsed.tooltips.push(true);
      }
    }

    else {

      parsed.tooltips = asArray(entry);

      if ( parsed.tooltips.length !== parsed.handles ) {
        throw new Error("noUiSlider (" + VERSION + "): must pass a formatter for all handles.");
      }

      parsed.tooltips.forEach(function(formatter){
        if ( typeof formatter !== 'boolean' && (typeof formatter !== 'object' || typeof formatter.to !== 'function') ) {
          throw new Error("noUiSlider (" + VERSION + "): 'tooltips' must be passed a formatter or 'false'.");
        }
      });
    }
  }

  function testAriaFormat ( parsed, entry ) {
    parsed.ariaFormat = entry;
    validateFormat(entry);
  }

  function testFormat ( parsed, entry ) {
    parsed.format = entry;
    validateFormat(entry);
  }

  function testCssPrefix ( parsed, entry ) {

    if ( entry !== undefined && typeof entry !== 'string' && entry !== false ) {
      throw new Error("noUiSlider (" + VERSION + "): 'cssPrefix' must be a string or `false`.");
    }

    parsed.cssPrefix = entry;
  }

  function testCssClasses ( parsed, entry ) {

    if ( entry !== undefined && typeof entry !== 'object' ) {
      throw new Error("noUiSlider (" + VERSION + "): 'cssClasses' must be an object.");
    }

    if ( typeof parsed.cssPrefix === 'string' ) {
      parsed.cssClasses = {};

      for ( var key in entry ) {
        if ( !entry.hasOwnProperty(key) ) { continue; }

        parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
      }
    } else {
      parsed.cssClasses = entry;
    }
  }

  function testUseRaf ( parsed, entry ) {
    if ( entry === true || entry === false ) {
      parsed.useRequestAnimationFrame = entry;
    } else {
      throw new Error("noUiSlider (" + VERSION + "): 'useRequestAnimationFrame' option should be true (default) or false.");
    }
  }

  // Test all developer settings and parse to assumption-safe values.
  function testOptions ( options ) {

    // To prove a fix for #537, freeze options here.
    // If the object is modified, an error will be thrown.
    // Object.freeze(options);

    var parsed = {
      margin: 0,
      limit: 0,
      padding: 0,
      animate: true,
      animationDuration: 300,
      ariaFormat: defaultFormatter,
      format: defaultFormatter
    };

    // Tests are executed in the order they are presented here.
    var tests = {
      'step': { r: false, t: testStep },
      'start': { r: true, t: testStart },
      'connect': { r: true, t: testConnect },
      'direction': { r: true, t: testDirection },
      'snap': { r: false, t: testSnap },
      'animate': { r: false, t: testAnimate },
      'animationDuration': { r: false, t: testAnimationDuration },
      'range': { r: true, t: testRange },
      'orientation': { r: false, t: testOrientation },
      'margin': { r: false, t: testMargin },
      'limit': { r: false, t: testLimit },
      'padding': { r: false, t: testPadding },
      'behaviour': { r: true, t: testBehaviour },
      'ariaFormat': { r: false, t: testAriaFormat },
      'format': { r: false, t: testFormat },
      'tooltips': { r: false, t: testTooltips },
      'cssPrefix': { r: false, t: testCssPrefix },
      'cssClasses': { r: false, t: testCssClasses },
      'useRequestAnimationFrame': { r: false, t: testUseRaf }
    };

    var defaults = {
      'connect': false,
      'direction': 'ltr',
      'behaviour': 'tap',
      'orientation': 'horizontal',
      'cssPrefix' : 'noUi-',
      'cssClasses': {
        target: 'target',
        base: 'base',
        origin: 'origin',
        handle: 'handle',
        handleLower: 'handle-lower',
        handleUpper: 'handle-upper',
        horizontal: 'horizontal',
        vertical: 'vertical',
        background: 'background',
        connect: 'connect',
        ltr: 'ltr',
        rtl: 'rtl',
        draggable: 'draggable',
        drag: 'state-drag',
        tap: 'state-tap',
        active: 'active',
        tooltip: 'tooltip',
        pips: 'pips',
        pipsHorizontal: 'pips-horizontal',
        pipsVertical: 'pips-vertical',
        marker: 'marker',
        markerHorizontal: 'marker-horizontal',
        markerVertical: 'marker-vertical',
        markerNormal: 'marker-normal',
        markerLarge: 'marker-large',
        markerSub: 'marker-sub',
        value: 'value',
        valueHorizontal: 'value-horizontal',
        valueVertical: 'value-vertical',
        valueNormal: 'value-normal',
        valueLarge: 'value-large',
        valueSub: 'value-sub'
      },
      'useRequestAnimationFrame': true
    };

    // AriaFormat defaults to regular format, if any.
    if ( options.format && !options.ariaFormat ) {
      options.ariaFormat = options.format;
    }

    // Run all options through a testing mechanism to ensure correct
    // input. It should be noted that options might get modified to
    // be handled properly. E.g. wrapping integers in arrays.
    Object.keys(tests).forEach(function( name ){

      // If the option isn't set, but it is required, throw an error.
      if ( options[name] === undefined && defaults[name] === undefined ) {

        if ( tests[name].r ) {
          throw new Error("noUiSlider (" + VERSION + "): '" + name + "' is required.");
        }

        return true;
      }

      tests[name].t( parsed, options[name] === undefined ? defaults[name] : options[name] );
    });

    // Forward pips options
    parsed.pips = options.pips;

    var styles = [['left', 'top'], ['right', 'bottom']];

    // Pre-define the styles.
    parsed.style = styles[parsed.dir][parsed.ort];
    parsed.styleOposite = styles[parsed.dir?0:1][parsed.ort];

    return parsed;
  }


function closure ( target, options, originalOptions ){

  var actions = getActions();
  var supportsTouchActionNone = getSupportsTouchActionNone();
  var supportsPassive = supportsTouchActionNone && getSupportsPassive();

  // All variables local to 'closure' are prefixed with 'scope_'
  var scope_Target = target;
  var scope_Locations = [];
  var scope_Base;
  var scope_Handles;
  var scope_HandleNumbers = [];
  var scope_ActiveHandle = false;
  var scope_Connects;
  var scope_Spectrum = options.spectrum;
  var scope_Values = [];
  var scope_Events = {};
  var scope_Self;
  var scope_Pips;
  var scope_Listeners = null;
  var scope_Document = target.ownerDocument;
  var scope_DocumentElement = scope_Document.documentElement;
  var scope_Body = scope_Document.body;


  // Creates a node, adds it to target, returns the new node.
  function addNodeTo ( target, className ) {

    var div = scope_Document.createElement('div');

    if ( className ) {
      addClass(div, className);
    }

    target.appendChild(div);

    return div;
  }

  // Append a origin to the base
  function addOrigin ( base, handleNumber ) {

    var origin = addNodeTo(base, options.cssClasses.origin);
    var handle = addNodeTo(origin, options.cssClasses.handle);

    handle.setAttribute('data-handle', handleNumber);

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
    // 0 = focusable and reachable
    handle.setAttribute('tabindex', '0');
    handle.setAttribute('role', 'slider');
    handle.setAttribute('aria-orientation', options.ort ? 'vertical' : 'horizontal');

    if ( handleNumber === 0 ) {
      addClass(handle, options.cssClasses.handleLower);
    }

    else if ( handleNumber === options.handles - 1 ) {
      addClass(handle, options.cssClasses.handleUpper);
    }

    return origin;
  }

  // Insert nodes for connect elements
  function addConnect ( base, add ) {

    if ( !add ) {
      return false;
    }

    return addNodeTo(base, options.cssClasses.connect);
  }

  // Add handles to the slider base.
  function addElements ( connectOptions, base ) {

    scope_Handles = [];
    scope_Connects = [];

    scope_Connects.push(addConnect(base, connectOptions[0]));

    // [::::O====O====O====]
    // connectOptions = [0, 1, 1, 1]

    for ( var i = 0; i < options.handles; i++ ) {
      // Keep a list of all added handles.
      scope_Handles.push(addOrigin(base, i));
      scope_HandleNumbers[i] = i;
      scope_Connects.push(addConnect(base, connectOptions[i + 1]));
    }
  }

  // Initialize a single slider.
  function addSlider ( target ) {

    // Apply classes and data to the target.
    addClass(target, options.cssClasses.target);

    if ( options.dir === 0 ) {
      addClass(target, options.cssClasses.ltr);
    } else {
      addClass(target, options.cssClasses.rtl);
    }

    if ( options.ort === 0 ) {
      addClass(target, options.cssClasses.horizontal);
    } else {
      addClass(target, options.cssClasses.vertical);
    }

    scope_Base = addNodeTo(target, options.cssClasses.base);
  }


  function addTooltip ( handle, handleNumber ) {

    if ( !options.tooltips[handleNumber] ) {
      return false;
    }

    return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
  }

  // The tooltips option is a shorthand for using the 'update' event.
  function tooltips ( ) {

    // Tooltips are added with options.tooltips in original order.
    var tips = scope_Handles.map(addTooltip);

    bindEvent('update', function(values, handleNumber, unencoded) {

      if ( !tips[handleNumber] ) {
        return;
      }

      var formattedValue = values[handleNumber];

      if ( options.tooltips[handleNumber] !== true ) {
        formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
      }

      tips[handleNumber].innerHTML = formattedValue;
    });
  }


  function aria ( ) {

    bindEvent('update', function ( values, handleNumber, unencoded, tap, positions ) {

      // Update Aria Values for all handles, as a change in one changes min and max values for the next.
      scope_HandleNumbers.forEach(function( handleNumber ){

        var handle = scope_Handles[handleNumber];

        var min = checkHandlePosition(scope_Locations, handleNumber, 0, true, true, true);
        var max = checkHandlePosition(scope_Locations, handleNumber, 100, true, true, true);

        var now = positions[handleNumber];
        var text = options.ariaFormat.to(unencoded[handleNumber]);

        handle.children[0].setAttribute('aria-valuemin', min.toFixed(1));
        handle.children[0].setAttribute('aria-valuemax', max.toFixed(1));
        handle.children[0].setAttribute('aria-valuenow', now.toFixed(1));
        handle.children[0].setAttribute('aria-valuetext', text);
      });
    });
  }


  function getGroup ( mode, values, stepped ) {

    // Use the range.
    if ( mode === 'range' || mode === 'steps' ) {
      return scope_Spectrum.xVal;
    }

    if ( mode === 'count' ) {

      if ( !values ) {
        throw new Error("noUiSlider (" + VERSION + "): 'values' required for mode 'count'.");
      }

      // Divide 0 - 100 in 'count' parts.
      var spread = ( 100 / (values - 1) );
      var v;
      var i = 0;

      values = [];

      // List these parts and have them handled as 'positions'.
      while ( (v = i++ * spread) <= 100 ) {
        values.push(v);
      }

      mode = 'positions';
    }

    if ( mode === 'positions' ) {

      // Map all percentages to on-range values.
      return values.map(function( value ){
        return scope_Spectrum.fromStepping( stepped ? scope_Spectrum.getStep( value ) : value );
      });
    }

    if ( mode === 'values' ) {

      // If the value must be stepped, it needs to be converted to a percentage first.
      if ( stepped ) {

        return values.map(function( value ){

          // Convert to percentage, apply step, return to value.
          return scope_Spectrum.fromStepping( scope_Spectrum.getStep( scope_Spectrum.toStepping( value ) ) );
        });

      }

      // Otherwise, we can simply use the values.
      return values;
    }
  }

  function generateSpread ( density, mode, group ) {

    function safeIncrement(value, increment) {
      // Avoid floating point variance by dropping the smallest decimal places.
      return (value + increment).toFixed(7) / 1;
    }

    var indexes = {};
    var firstInRange = scope_Spectrum.xVal[0];
    var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length-1];
    var ignoreFirst = false;
    var ignoreLast = false;
    var prevPct = 0;

    // Create a copy of the group, sort it and filter away all duplicates.
    group = unique(group.slice().sort(function(a, b){ return a - b; }));

    // Make sure the range starts with the first element.
    if ( group[0] !== firstInRange ) {
      group.unshift(firstInRange);
      ignoreFirst = true;
    }

    // Likewise for the last one.
    if ( group[group.length - 1] !== lastInRange ) {
      group.push(lastInRange);
      ignoreLast = true;
    }

    group.forEach(function ( current, index ) {

      // Get the current step and the lower + upper positions.
      var step;
      var i;
      var q;
      var low = current;
      var high = group[index+1];
      var newPct;
      var pctDifference;
      var pctPos;
      var type;
      var steps;
      var realSteps;
      var stepsize;

      // When using 'steps' mode, use the provided steps.
      // Otherwise, we'll step on to the next subrange.
      if ( mode === 'steps' ) {
        step = scope_Spectrum.xNumSteps[ index ];
      }

      // Default to a 'full' step.
      if ( !step ) {
        step = high-low;
      }

      // Low can be 0, so test for false. If high is undefined,
      // we are at the last subrange. Index 0 is already handled.
      if ( low === false || high === undefined ) {
        return;
      }

      // Make sure step isn't 0, which would cause an infinite loop (#654)
      step = Math.max(step, 0.0000001);

      // Find all steps in the subrange.
      for ( i = low; i <= high; i = safeIncrement(i, step) ) {

        // Get the percentage value for the current step,
        // calculate the size for the subrange.
        newPct = scope_Spectrum.toStepping( i );
        pctDifference = newPct - prevPct;

        steps = pctDifference / density;
        realSteps = Math.round(steps);

        // This ratio represents the ammount of percentage-space a point indicates.
        // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-devided.
        // Round the percentage offset to an even number, then divide by two
        // to spread the offset on both sides of the range.
        stepsize = pctDifference/realSteps;

        // Divide all points evenly, adding the correct number to this subrange.
        // Run up to <= so that 100% gets a point, event if ignoreLast is set.
        for ( q = 1; q <= realSteps; q += 1 ) {

          // The ratio between the rounded value and the actual size might be ~1% off.
          // Correct the percentage offset by the number of points
          // per subrange. density = 1 will result in 100 points on the
          // full range, 2 for 50, 4 for 25, etc.
          pctPos = prevPct + ( q * stepsize );
          indexes[pctPos.toFixed(5)] = ['x', 0];
        }

        // Determine the point type.
        type = (group.indexOf(i) > -1) ? 1 : ( mode === 'steps' ? 2 : 0 );

        // Enforce the 'ignoreFirst' option by overwriting the type for 0.
        if ( !index && ignoreFirst ) {
          type = 0;
        }

        if ( !(i === high && ignoreLast)) {
          // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
          indexes[newPct.toFixed(5)] = [i, type];
        }

        // Update the percentage count.
        prevPct = newPct;
      }
    });

    return indexes;
  }

  function addMarking ( spread, filterFunc, formatter ) {

    var element = scope_Document.createElement('div');

    var valueSizeClasses = [
      options.cssClasses.valueNormal,
      options.cssClasses.valueLarge,
      options.cssClasses.valueSub
    ];
    var markerSizeClasses = [
      options.cssClasses.markerNormal,
      options.cssClasses.markerLarge,
      options.cssClasses.markerSub
    ];
    var valueOrientationClasses = [
      options.cssClasses.valueHorizontal,
      options.cssClasses.valueVertical
    ];
    var markerOrientationClasses = [
      options.cssClasses.markerHorizontal,
      options.cssClasses.markerVertical
    ];

    addClass(element, options.cssClasses.pips);
    addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);

    function getClasses( type, source ){
      var a = source === options.cssClasses.value;
      var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
      var sizeClasses = a ? valueSizeClasses : markerSizeClasses;

      return source + ' ' + orientationClasses[options.ort] + ' ' + sizeClasses[type];
    }

    function addSpread ( offset, values ){

      // Apply the filter function, if it is set.
      values[1] = (values[1] && filterFunc) ? filterFunc(values[0], values[1]) : values[1];

      // Add a marker for every point
      var node = addNodeTo(element, false);
        node.className = getClasses(values[1], options.cssClasses.marker);
        node.style[options.style] = offset + '%';

      // Values are only appended for points marked '1' or '2'.
      if ( values[1] ) {
        node = addNodeTo(element, false);
        node.className = getClasses(values[1], options.cssClasses.value);
        node.style[options.style] = offset + '%';
        node.innerText = formatter.to(values[0]);
      }
    }

    // Append all points.
    Object.keys(spread).forEach(function(a){
      addSpread(a, spread[a]);
    });

    return element;
  }

  function removePips ( ) {
    if ( scope_Pips ) {
      removeElement(scope_Pips);
      scope_Pips = null;
    }
  }

  function pips ( grid ) {

    // Fix #669
    removePips();

    var mode = grid.mode;
    var density = grid.density || 1;
    var filter = grid.filter || false;
    var values = grid.values || false;
    var stepped = grid.stepped || false;
    var group = getGroup( mode, values, stepped );
    var spread = generateSpread( density, mode, group );
    var format = grid.format || {
      to: Math.round
    };

    scope_Pips = scope_Target.appendChild(addMarking(
      spread,
      filter,
      format
    ));

    return scope_Pips;
  }


  // Shorthand for base dimensions.
  function baseSize ( ) {
    var rect = scope_Base.getBoundingClientRect(), alt = 'offset' + ['Width', 'Height'][options.ort];
    return options.ort === 0 ? (rect.width||scope_Base[alt]) : (rect.height||scope_Base[alt]);
  }

  // Handler for attaching events trough a proxy.
  function attachEvent ( events, element, callback, data ) {

    // This function can be used to 'filter' events to the slider.
    // element is a node, not a nodeList

    var method = function ( e ){

      if ( scope_Target.hasAttribute('disabled') ) {
        return false;
      }

      // Stop if an active 'tap' transition is taking place.
      if ( hasClass(scope_Target, options.cssClasses.tap) ) {
        return false;
      }

      e = fixEvent(e, data.pageOffset);

      // Handle reject of multitouch
      if ( !e ) {
        return false;
      }

      // Ignore right or middle clicks on start #454
      if ( events === actions.start && e.buttons !== undefined && e.buttons > 1 ) {
        return false;
      }

      // Ignore right or middle clicks on start #454
      if ( data.hover && e.buttons ) {
        return false;
      }

      // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.
      // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support
      // touch-action: manipulation, but that allows panning, which breaks
      // sliders after zooming/on non-responsive pages.
      // See: https://bugs.webkit.org/show_bug.cgi?id=133112
      if ( !supportsPassive ) {
        e.preventDefault();
      }

      e.calcPoint = e.points[ options.ort ];

      // Call the event handler with the event [ and additional data ].
      callback ( e, data );
    };

    var methods = [];

    // Bind a closure on the target for every event type.
    events.split(' ').forEach(function( eventName ){
      element.addEventListener(eventName, method, supportsPassive ? { passive: true } : false);
      methods.push([eventName, method]);
    });

    return methods;
  }

  // Provide a clean event with standardized offset values.
  function fixEvent ( e, pageOffset ) {

    // Filter the event to register the type, which can be
    // touch, mouse or pointer. Offset changes need to be
    // made on an event specific basis.
    var touch = e.type.indexOf('touch') === 0;
    var mouse = e.type.indexOf('mouse') === 0;
    var pointer = e.type.indexOf('pointer') === 0;

    var x;
    var y;

    // IE10 implemented pointer events with a prefix;
    if ( e.type.indexOf('MSPointer') === 0 ) {
      pointer = true;
    }

    if ( touch ) {

      // Fix bug when user touches with two or more fingers on mobile devices.
      // It's useful when you have two or more sliders on one page,
      // that can be touched simultaneously.
      // #649, #663, #668
      if ( e.touches.length > 1 ) {
        return false;
      }

      // noUiSlider supports one movement at a time,
      // so we can select the first 'changedTouch'.
      x = e.changedTouches[0].pageX;
      y = e.changedTouches[0].pageY;
    }

    pageOffset = pageOffset || getPageOffset(scope_Document);

    if ( mouse || pointer ) {
      x = e.clientX + pageOffset.x;
      y = e.clientY + pageOffset.y;
    }

    e.pageOffset = pageOffset;
    e.points = [x, y];
    e.cursor = mouse || pointer; // Fix #435

    return e;
  }

  // Translate a coordinate in the document to a percentage on the slider
  function calcPointToPercentage ( calcPoint ) {
    var location = calcPoint - offset(scope_Base, options.ort);
    var proposal = ( location * 100 ) / baseSize();
    return options.dir ? 100 - proposal : proposal;
  }

  // Find handle closest to a certain percentage on the slider
  function getClosestHandle ( proposal ) {

    var closest = 100;
    var handleNumber = false;

    scope_Handles.forEach(function(handle, index){

      // Disabled handles are ignored
      if ( handle.hasAttribute('disabled') ) {
        return;
      }

      var pos = Math.abs(scope_Locations[index] - proposal);

      if ( pos < closest ) {
        handleNumber = index;
        closest = pos;
      }
    });

    return handleNumber;
  }

  // Moves handle(s) by a percentage
  // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])
  function moveHandles ( upward, proposal, locations, handleNumbers ) {

    var proposals = locations.slice();

    var b = [!upward, upward];
    var f = [upward, !upward];

    // Copy handleNumbers so we don't change the dataset
    handleNumbers = handleNumbers.slice();

    // Check to see which handle is 'leading'.
    // If that one can't move the second can't either.
    if ( upward ) {
      handleNumbers.reverse();
    }

    // Step 1: get the maximum percentage that any of the handles can move
    if ( handleNumbers.length > 1 ) {

      handleNumbers.forEach(function(handleNumber, o) {

        var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false);

        // Stop if one of the handles can't move.
        if ( to === false ) {
          proposal = 0;
        } else {
          proposal = to - proposals[handleNumber];
          proposals[handleNumber] = to;
        }
      });
    }

    // If using one handle, check backward AND forward
    else {
      b = f = [true];
    }

    var state = false;

    // Step 2: Try to set the handles with the found percentage
    handleNumbers.forEach(function(handleNumber, o) {
      state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;
    });

    // Step 3: If a handle moved, fire events
    if ( state ) {
      handleNumbers.forEach(function(handleNumber){
        fireEvent('update', handleNumber);
        fireEvent('slide', handleNumber);
      });
    }
  }

  // External event handling
  function fireEvent ( eventName, handleNumber, tap ) {

    Object.keys(scope_Events).forEach(function( targetEvent ) {

      var eventType = targetEvent.split('.')[0];

      if ( eventName === eventType ) {
        scope_Events[targetEvent].forEach(function( callback ) {

          callback.call(
            // Use the slider public API as the scope ('this')
            scope_Self,
            // Return values as array, so arg_1[arg_2] is always valid.
            scope_Values.map(options.format.to),
            // Handle index, 0 or 1
            handleNumber,
            // Unformatted slider values
            scope_Values.slice(),
            // Event is fired by tap, true or false
            tap || false,
            // Left offset of the handle, in relation to the slider
            scope_Locations.slice()
          );
        });
      }
    });
  }


  // Fire 'end' when a mouse or pen leaves the document.
  function documentLeave ( event, data ) {
    if ( event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null ){
      eventEnd (event, data);
    }
  }

  // Handle movement on document for handle and range drag.
  function eventMove ( event, data ) {

    // Fix #498
    // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).
    // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero
    // IE9 has .buttons and .which zero on mousemove.
    // Firefox breaks the spec MDN defines.
    if ( navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0 ) {
      return eventEnd(event, data);
    }

    // Check if we are moving up or down
    var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);

    // Convert the movement into a percentage of the slider width/height
    var proposal = (movement * 100) / data.baseSize;

    moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);
  }

  // Unbind move events on document, call callbacks.
  function eventEnd ( event, data ) {

    // The handle is no longer active, so remove the class.
    if ( scope_ActiveHandle ) {
      removeClass(scope_ActiveHandle, options.cssClasses.active);
      scope_ActiveHandle = false;
    }

    // Remove cursor styles and text-selection events bound to the body.
    if ( event.cursor ) {
      scope_Body.style.cursor = '';
      scope_Body.removeEventListener('selectstart', preventDefault);
    }

    // Unbind the move and end events, which are added on 'start'.
    scope_Listeners.forEach(function( c ) {
      scope_DocumentElement.removeEventListener(c[0], c[1]);
    });

    // Remove dragging class.
    removeClass(scope_Target, options.cssClasses.drag);

    setZindex();

    data.handleNumbers.forEach(function(handleNumber){
      fireEvent('change', handleNumber);
      fireEvent('set', handleNumber);
      fireEvent('end', handleNumber);
    });
  }

  // Bind move events on document.
  function eventStart ( event, data ) {

    if ( data.handleNumbers.length === 1 ) {

      var handle = scope_Handles[data.handleNumbers[0]];

      // Ignore 'disabled' handles
      if ( handle.hasAttribute('disabled') ) {
        return false;
      }

      // Mark the handle as 'active' so it can be styled.
      scope_ActiveHandle = handle.children[0];
      addClass(scope_ActiveHandle, options.cssClasses.active);
    }

    // A drag should never propagate up to the 'tap' event.
    event.stopPropagation();

    // Attach the move and end events.
    var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
      startCalcPoint: event.calcPoint,
      baseSize: baseSize(),
      pageOffset: event.pageOffset,
      handleNumbers: data.handleNumbers,
      buttonsProperty: event.buttons,
      locations: scope_Locations.slice()
    });

    var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
      handleNumbers: data.handleNumbers
    });

    var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
      handleNumbers: data.handleNumbers
    });

    scope_Listeners = moveEvent.concat(endEvent, outEvent);

    // Text selection isn't an issue on touch devices,
    // so adding cursor styles can be skipped.
    if ( event.cursor ) {

      // Prevent the 'I' cursor and extend the range-drag cursor.
      scope_Body.style.cursor = getComputedStyle(event.target).cursor;

      // Mark the target with a dragging state.
      if ( scope_Handles.length > 1 ) {
        addClass(scope_Target, options.cssClasses.drag);
      }

      // Prevent text selection when dragging the handles.
      // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,
      // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,
      // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.
      // The 'cursor' flag is false.
      // See: http://caniuse.com/#search=selectstart
      scope_Body.addEventListener('selectstart', preventDefault, false);
    }

    data.handleNumbers.forEach(function(handleNumber){
      fireEvent('start', handleNumber);
    });
  }

  // Move closest handle to tapped location.
  function eventTap ( event ) {

    // The tap event shouldn't propagate up
    event.stopPropagation();

    var proposal = calcPointToPercentage(event.calcPoint);
    var handleNumber = getClosestHandle(proposal);

    // Tackle the case that all handles are 'disabled'.
    if ( handleNumber === false ) {
      return false;
    }

    // Flag the slider as it is now in a transitional state.
    // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.
    if ( !options.events.snap ) {
      addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
    }

    setHandle(handleNumber, proposal, true, true);

    setZindex();

    fireEvent('slide', handleNumber, true);
    fireEvent('update', handleNumber, true);
    fireEvent('change', handleNumber, true);
    fireEvent('set', handleNumber, true);

    if ( options.events.snap ) {
      eventStart(event, { handleNumbers: [handleNumber] });
    }
  }

  // Fires a 'hover' event for a hovered mouse/pen position.
  function eventHover ( event ) {

    var proposal = calcPointToPercentage(event.calcPoint);

    var to = scope_Spectrum.getStep(proposal);
    var value = scope_Spectrum.fromStepping(to);

    Object.keys(scope_Events).forEach(function( targetEvent ) {
      if ( 'hover' === targetEvent.split('.')[0] ) {
        scope_Events[targetEvent].forEach(function( callback ) {
          callback.call( scope_Self, value );
        });
      }
    });
  }

  // Attach events to several slider parts.
  function bindSliderEvents ( behaviour ) {

    // Attach the standard drag event to the handles.
    if ( !behaviour.fixed ) {

      scope_Handles.forEach(function( handle, index ){

        // These events are only bound to the visual handle
        // element, not the 'real' origin element.
        attachEvent ( actions.start, handle.children[0], eventStart, {
          handleNumbers: [index]
        });
      });
    }

    // Attach the tap event to the slider base.
    if ( behaviour.tap ) {
      attachEvent (actions.start, scope_Base, eventTap, {});
    }

    // Fire hover events
    if ( behaviour.hover ) {
      attachEvent (actions.move, scope_Base, eventHover, { hover: true });
    }

    // Make the range draggable.
    if ( behaviour.drag ){

      scope_Connects.forEach(function( connect, index ){

        if ( connect === false || index === 0 || index === scope_Connects.length - 1 ) {
          return;
        }

        var handleBefore = scope_Handles[index - 1];
        var handleAfter = scope_Handles[index];
        var eventHolders = [connect];

        addClass(connect, options.cssClasses.draggable);

        // When the range is fixed, the entire range can
        // be dragged by the handles. The handle in the first
        // origin will propagate the start event upward,
        // but it needs to be bound manually on the other.
        if ( behaviour.fixed ) {
          eventHolders.push(handleBefore.children[0]);
          eventHolders.push(handleAfter.children[0]);
        }

        eventHolders.forEach(function( eventHolder ) {
          attachEvent ( actions.start, eventHolder, eventStart, {
            handles: [handleBefore, handleAfter],
            handleNumbers: [index - 1, index]
          });
        });
      });
    }
  }


  // Split out the handle positioning logic so the Move event can use it, too
  function checkHandlePosition ( reference, handleNumber, to, lookBackward, lookForward, getValue ) {

    // For sliders with multiple handles, limit movement to the other handle.
    // Apply the margin option by adding it to the handle positions.
    if ( scope_Handles.length > 1 ) {

      if ( lookBackward && handleNumber > 0 ) {
        to = Math.max(to, reference[handleNumber - 1] + options.margin);
      }

      if ( lookForward && handleNumber < scope_Handles.length - 1 ) {
        to = Math.min(to, reference[handleNumber + 1] - options.margin);
      }
    }

    // The limit option has the opposite effect, limiting handles to a
    // maximum distance from another. Limit must be > 0, as otherwise
    // handles would be unmoveable.
    if ( scope_Handles.length > 1 && options.limit ) {

      if ( lookBackward && handleNumber > 0 ) {
        to = Math.min(to, reference[handleNumber - 1] + options.limit);
      }

      if ( lookForward && handleNumber < scope_Handles.length - 1 ) {
        to = Math.max(to, reference[handleNumber + 1] - options.limit);
      }
    }

    // The padding option keeps the handles a certain distance from the
    // edges of the slider. Padding must be > 0.
    if ( options.padding ) {

      if ( handleNumber === 0 ) {
        to = Math.max(to, options.padding);
      }

      if ( handleNumber === scope_Handles.length - 1 ) {
        to = Math.min(to, 100 - options.padding);
      }
    }

    to = scope_Spectrum.getStep(to);

    // Limit percentage to the 0 - 100 range
    to = limit(to);

    // Return false if handle can't move
    if ( to === reference[handleNumber] && !getValue ) {
      return false;
    }

    return to;
  }

  function toPct ( pct ) {
    return pct + '%';
  }

  // Updates scope_Locations and scope_Values, updates visual state
  function updateHandlePosition ( handleNumber, to ) {

    // Update locations.
    scope_Locations[handleNumber] = to;

    // Convert the value to the slider stepping/range.
    scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);

    // Called synchronously or on the next animationFrame
    var stateUpdate = function() {
      scope_Handles[handleNumber].style[options.style] = toPct(to);
      updateConnect(handleNumber);
      updateConnect(handleNumber + 1);
    };

    // Set the handle to the new position.
    // Use requestAnimationFrame for efficient painting.
    // No significant effect in Chrome, Edge sees dramatic performace improvements.
    // Option to disable is useful for unit tests, and single-step debugging.
    if ( window.requestAnimationFrame && options.useRequestAnimationFrame ) {
      window.requestAnimationFrame(stateUpdate);
    } else {
      stateUpdate();
    }
  }

  function setZindex ( ) {

    scope_HandleNumbers.forEach(function(handleNumber){
      // Handles before the slider middle are stacked later = higher,
      // Handles after the middle later is lower
      // [[7] [8] .......... | .......... [5] [4]
      var dir = (scope_Locations[handleNumber] > 50 ? -1 : 1);
      var zIndex = 3 + (scope_Handles.length + (dir * handleNumber));
      scope_Handles[handleNumber].childNodes[0].style.zIndex = zIndex;
    });
  }

  // Test suggested values and apply margin, step.
  function setHandle ( handleNumber, to, lookBackward, lookForward ) {

    to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);

    if ( to === false ) {
      return false;
    }

    updateHandlePosition(handleNumber, to);

    return true;
  }

  // Updates style attribute for connect nodes
  function updateConnect ( index ) {

    // Skip connects set to false
    if ( !scope_Connects[index] ) {
      return;
    }

    var l = 0;
    var h = 100;

    if ( index !== 0 ) {
      l = scope_Locations[index - 1];
    }

    if ( index !== scope_Connects.length - 1 ) {
      h = scope_Locations[index];
    }

    scope_Connects[index].style[options.style] = toPct(l);
    scope_Connects[index].style[options.styleOposite] = toPct(100 - h);
  }

  // ...
  function setValue ( to, handleNumber ) {

    // Setting with null indicates an 'ignore'.
    // Inputting 'false' is invalid.
    if ( to === null || to === false ) {
      return;
    }

    // If a formatted number was passed, attemt to decode it.
    if ( typeof to === 'number' ) {
      to = String(to);
    }

    to = options.format.from(to);

    // Request an update for all links if the value was invalid.
    // Do so too if setting the handle fails.
    if ( to !== false && !isNaN(to) ) {
      setHandle(handleNumber, scope_Spectrum.toStepping(to), false, false);
    }
  }

  // Set the slider value.
  function valueSet ( input, fireSetEvent ) {

    var values = asArray(input);
    var isInit = scope_Locations[0] === undefined;

    // Event fires by default
    fireSetEvent = (fireSetEvent === undefined ? true : !!fireSetEvent);

    values.forEach(setValue);

    // Animation is optional.
    // Make sure the initial values were set before using animated placement.
    if ( options.animate && !isInit ) {
      addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
    }

    // Now that all base values are set, apply constraints
    scope_HandleNumbers.forEach(function(handleNumber){
      setHandle(handleNumber, scope_Locations[handleNumber], true, false);
    });

    setZindex();

    scope_HandleNumbers.forEach(function(handleNumber){

      fireEvent('update', handleNumber);

      // Fire the event only for handles that received a new value, as per #579
      if ( values[handleNumber] !== null && fireSetEvent ) {
        fireEvent('set', handleNumber);
      }
    });
  }

  // Reset slider to initial values
  function valueReset ( fireSetEvent ) {
    valueSet(options.start, fireSetEvent);
  }

  // Get the slider value.
  function valueGet ( ) {

    var values = scope_Values.map(options.format.to);

    // If only one handle is used, return a single value.
    if ( values.length === 1 ){
      return values[0];
    }

    return values;
  }

  // Removes classes from the root and empties it.
  function destroy ( ) {

    for ( var key in options.cssClasses ) {
      if ( !options.cssClasses.hasOwnProperty(key) ) { continue; }
      removeClass(scope_Target, options.cssClasses[key]);
    }

    while (scope_Target.firstChild) {
      scope_Target.removeChild(scope_Target.firstChild);
    }

    delete scope_Target.noUiSlider;
  }

  // Get the current step size for the slider.
  function getCurrentStep ( ) {

    // Check all locations, map them to their stepping point.
    // Get the step point, then find it in the input list.
    return scope_Locations.map(function( location, index ){

      var nearbySteps = scope_Spectrum.getNearbySteps( location );
      var value = scope_Values[index];
      var increment = nearbySteps.thisStep.step;
      var decrement = null;

      // If the next value in this step moves into the next step,
      // the increment is the start of the next step - the current value
      if ( increment !== false ) {
        if ( value + increment > nearbySteps.stepAfter.startValue ) {
          increment = nearbySteps.stepAfter.startValue - value;
        }
      }


      // If the value is beyond the starting point
      if ( value > nearbySteps.thisStep.startValue ) {
        decrement = nearbySteps.thisStep.step;
      }

      else if ( nearbySteps.stepBefore.step === false ) {
        decrement = false;
      }

      // If a handle is at the start of a step, it always steps back into the previous step first
      else {
        decrement = value - nearbySteps.stepBefore.highestStep;
      }


      // Now, if at the slider edges, there is not in/decrement
      if ( location === 100 ) {
        increment = null;
      }

      else if ( location === 0 ) {
        decrement = null;
      }

      // As per #391, the comparison for the decrement step can have some rounding issues.
      var stepDecimals = scope_Spectrum.countStepDecimals();

      // Round per #391
      if ( increment !== null && increment !== false ) {
        increment = Number(increment.toFixed(stepDecimals));
      }

      if ( decrement !== null && decrement !== false ) {
        decrement = Number(decrement.toFixed(stepDecimals));
      }

      return [decrement, increment];
    });
  }

  // Attach an event to this slider, possibly including a namespace
  function bindEvent ( namespacedEvent, callback ) {
    scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
    scope_Events[namespacedEvent].push(callback);

    // If the event bound is 'update,' fire it immediately for all handles.
    if ( namespacedEvent.split('.')[0] === 'update' ) {
      scope_Handles.forEach(function(a, index){
        fireEvent('update', index);
      });
    }
  }

  // Undo attachment of event
  function removeEvent ( namespacedEvent ) {

    var event = namespacedEvent && namespacedEvent.split('.')[0];
    var namespace = event && namespacedEvent.substring(event.length);

    Object.keys(scope_Events).forEach(function( bind ){

      var tEvent = bind.split('.')[0],
        tNamespace = bind.substring(tEvent.length);

      if ( (!event || event === tEvent) && (!namespace || namespace === tNamespace) ) {
        delete scope_Events[bind];
      }
    });
  }

  // Updateable: margin, limit, padding, step, range, animate, snap
  function updateOptions ( optionsToUpdate, fireSetEvent ) {

    // Spectrum is created using the range, snap, direction and step options.
    // 'snap' and 'step' can be updated.
    // If 'snap' and 'step' are not passed, they should remain unchanged.
    var v = valueGet();

    var updateAble = ['margin', 'limit', 'padding', 'range', 'animate', 'snap', 'step', 'format'];

    // Only change options that we're actually passed to update.
    updateAble.forEach(function(name){
      if ( optionsToUpdate[name] !== undefined ) {
        originalOptions[name] = optionsToUpdate[name];
      }
    });

    var newOptions = testOptions(originalOptions);

    // Load new options into the slider state
    updateAble.forEach(function(name){
      if ( optionsToUpdate[name] !== undefined ) {
        options[name] = newOptions[name];
      }
    });

    scope_Spectrum = newOptions.spectrum;

    // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)
    options.margin = newOptions.margin;
    options.limit = newOptions.limit;
    options.padding = newOptions.padding;

    // Update pips, removes existing.
    if ( options.pips ) {
      pips(options.pips);
    }

    // Invalidate the current positioning so valueSet forces an update.
    scope_Locations = [];
    valueSet(optionsToUpdate.start || v, fireSetEvent);
  }

  // Throw an error if the slider was already initialized.
  if ( scope_Target.noUiSlider ) {
    throw new Error("noUiSlider (" + VERSION + "): Slider was already initialized.");
  }

  // Create the base element, initialise HTML and set classes.
  // Add handles and connect elements.
  addSlider(scope_Target);
  addElements(options.connect, scope_Base);

  scope_Self = {
    destroy: destroy,
    steps: getCurrentStep,
    on: bindEvent,
    off: removeEvent,
    get: valueGet,
    set: valueSet,
    reset: valueReset,
    // Exposed for unit testing, don't use this in your application.
    __moveHandles: function(a, b, c) { moveHandles(a, b, scope_Locations, c); },
    options: originalOptions, // Issue #600, #678
    updateOptions: updateOptions,
    target: scope_Target, // Issue #597
    removePips: removePips,
    pips: pips // Issue #594
  };

  // Attach user events.
  bindSliderEvents(options.events);

  // Use the public value method to set the start values.
  valueSet(options.start);

  if ( options.pips ) {
    pips(options.pips);
  }

  if ( options.tooltips ) {
    tooltips();
  }

  aria();

  return scope_Self;

}


  // Run the standard initializer
  function initialize ( target, originalOptions ) {

    if ( !target || !target.nodeName ) {
      throw new Error("noUiSlider (" + VERSION + "): create requires a single element, got: " + target);
    }

    // Test the options and create the slider environment;
    var options = testOptions( originalOptions, target );
    var api = closure( target, options, originalOptions );

    target.noUiSlider = api;

    return api;
  }

  // Use an object instead of a function for future expansibility;
  return {
    version: VERSION,
    create: initialize
  };

}));


















/*
    ui.anglepicker
*/
(function($) {
$.widget("ui.anglepicker", $.ui.mouse, {
  widgetEventPrefix: "angle",
  _init: function() {
      this._mouseInit();
      this.pointer = $('<div class="ui-anglepicker-pointer"></div>');
      this.pointer.append('<div class="ui-anglepicker-dot"></div>');
      this.pointer.append('<div class="ui-anglepicker-line"></div>');

      this.element.addClass("ui-anglepicker");
      this.element.append(this.pointer);

      this.setDegrees(this.options.value);
  },
  _propagate: function(name, event) {
      this._trigger(name, event, this.ui());
  },
  _create: function() {

  },
  destroy: function() {
      this._mouseDestroy();

      this.element.removeClass("ui-anglepicker");
      this.pointer.remove();
  },
  _mouseCapture: function(event) {
      var myOffset = this.element.offset();
      this.width = this.element.width();
      this.height = this.element.height();

      this.startOffset = {
          x: myOffset.left+(this.width/2),
          y: myOffset.top+(this.height/2)
      };

      if (!this.element.is("ui-anglepicker-dragging")) {
          this.setDegreesFromEvent(event);
          this._propagate("change", event);
      }

      return true;
  },
  _mouseStart: function(event) {
      this.element.addClass("ui-anglepicker-dragging");
      this.setDegreesFromEvent(event);
      this._propagate("start", event);
  },
  _mouseStop: function(event) {
      this.element.removeClass("ui-anglepicker-dragging");
      this._propagate("stop", event);
  },
  _mouseDrag: function(event) {
      this.setDegreesFromEvent(event);
      this._propagate("change", event);
  },
  _setOption: function(key, value) {

      this._super(key, value);
  },

  ui: function() {
      return {
          element: this.element,
          value: this.options.value
      };
  },
  value: function(newValue) {

      if (!arguments.length) {
          return this.options.value;
      }

      var oldValue = this.options.value;
      this.setDegrees(newValue);

      if (oldValue !== this.options.value) {
          this._propagate("change");
      }

      return this;
  },
  drawRotation: function() {
      var value = this.options.clockwise ? this.options.value : -this.options.value;
      var rotation = 'rotate('+-value+'deg)';

      this.pointer.css({
          '-webkit-transform': rotation,
          '-moz-transform': rotation,
          '-ms-transform': rotation,
          '-o-transform': rotation,
          'transform': rotation
      });
  },
  setDegrees: function(degrees) {
      this.options.value = this.clamp(degrees);
      this.drawRotation();
  },
  clamp: function(degrees) {
      if (typeof degrees !== "number") {
          degrees = parseInt(degrees, 10);
          if (isNaN(degrees)) {
              degrees = 0;
          }
      }

      var min = this.options.min,
          max = min + 360;

      while (degrees < min) {
          degrees += 360;
      }
      while (degrees > max) {
          degrees -= 360;
      }

      return degrees;
  },
  setDegreesFromEvent: function(event) {
      var opposite = this.startOffset.y - event.pageY;
      opposite = this.options.clockwise ? opposite : -opposite;

      var adjacent = event.pageX - this.startOffset.x,
          radians = Math.atan(opposite/adjacent),
          degrees = Math.round(radians * (180/Math.PI), 10);

      if (event.shiftKey) {
          degrees = this.roundToMultiple(degrees, this.options.shiftSnap);
      }
      else {
          degrees = this.roundToMultiple(degrees, this.options.snap);
      }

      if (adjacent < 0 && opposite >= 0) {
          degrees += 180;
      }
      else if (opposite < 0 && adjacent < 0) {
          degrees -= 180;
      }

      this.setDegrees(degrees);
  },
  roundToMultiple: function(number, multiple) {
      var value = number/multiple,
          integer = Math.floor(value),
          rest = value - integer;

      return rest > 0.5 ? (integer+1)*multiple : integer*multiple;
  },
  options: {
      distance: 1,
      delay: 1,
      snap: 1,
      min: 0,
      shiftSnap: 15,
      value: 90,
      clockwise: true // anti-clockwise if false
  }
});
})(jQuery);















/*
 * dragula.min.js
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n;n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,n.dragula=e()}}(function(){return function e(n,t,r){function o(u,c){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!c&&a)return a(u,!0);if(i)return i(u,!0);var f=new Error("Cannot find module '"+u+"'");throw f.code="MODULE_NOT_FOUND",f}var l=t[u]={exports:{}};n[u][0].call(l.exports,function(e){var t=n[u][1][e];return o(t?t:e)},l,l.exports,e,n,t,r)}return t[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,n,t){"use strict";function r(e){var n=u[e];return n?n.lastIndex=0:u[e]=n=new RegExp(c+e+a,"g"),n}function o(e,n){var t=e.className;t.length?r(n).test(t)||(e.className+=" "+n):e.className=n}function i(e,n){e.className=e.className.replace(r(n)," ").trim()}var u={},c="(?:^|\\s)",a="(?:\\s|$)";n.exports={add:o,rm:i}},{}],2:[function(e,n,t){(function(t){"use strict";function r(e,n){function t(e){return-1!==le.containers.indexOf(e)||fe.isContainer(e)}function r(e){var n=e?"remove":"add";o(S,n,"mousedown",O),o(S,n,"mouseup",L)}function c(e){var n=e?"remove":"add";o(S,n,"mousemove",N)}function m(e){var n=e?"remove":"add";w[n](S,"selectstart",C),w[n](S,"click",C)}function h(){r(!0),L({})}function C(e){ce&&e.preventDefault()}function O(e){ne=e.clientX,te=e.clientY;var n=1!==i(e)||e.metaKey||e.ctrlKey;if(!n){var t=e.target,r=T(t);r&&(ce=r,c(),"mousedown"===e.type&&(p(t)?t.focus():e.preventDefault()))}}function N(e){if(ce){if(0===i(e))return void L({});if(void 0===e.clientX||e.clientX!==ne||void 0===e.clientY||e.clientY!==te){if(fe.ignoreInputTextSelection){var n=y("clientX",e),t=y("clientY",e),r=x.elementFromPoint(n,t);if(p(r))return}var o=ce;c(!0),m(),D(),B(o);var a=u(W);Z=y("pageX",e)-a.left,ee=y("pageY",e)-a.top,E.add(ie||W,"gu-transit"),K(),U(e)}}}function T(e){if(!(le.dragging&&J||t(e))){for(var n=e;v(e)&&t(v(e))===!1;){if(fe.invalid(e,n))return;if(e=v(e),!e)return}var r=v(e);if(r&&!fe.invalid(e,n)){var o=fe.moves(e,r,n,g(e));if(o)return{item:e,source:r}}}}function X(e){return!!T(e)}function Y(e){var n=T(e);n&&B(n)}function B(e){$(e.item,e.source)&&(ie=e.item.cloneNode(!0),le.emit("cloned",ie,e.item,"copy")),Q=e.source,W=e.item,re=oe=g(e.item),le.dragging=!0,le.emit("drag",W,Q)}function P(){return!1}function D(){if(le.dragging){var e=ie||W;M(e,v(e))}}function I(){ce=!1,c(!0),m(!0)}function L(e){if(I(),le.dragging){var n=ie||W,t=y("clientX",e),r=y("clientY",e),o=a(J,t,r),i=q(o,t,r);i&&(ie&&fe.copySortSource||!ie||i!==Q)?M(n,i):fe.removeOnSpill?R():A()}}function M(e,n){var t=v(e);ie&&fe.copySortSource&&n===Q&&t.removeChild(W),k(n)?le.emit("cancel",e,Q,Q):le.emit("drop",e,n,Q,oe),j()}function R(){if(le.dragging){var e=ie||W,n=v(e);n&&n.removeChild(e),le.emit(ie?"cancel":"remove",e,n,Q),j()}}function A(e){if(le.dragging){var n=arguments.length>0?e:fe.revertOnSpill,t=ie||W,r=v(t),o=k(r);o===!1&&n&&(ie?r&&r.removeChild(ie):Q.insertBefore(t,re)),o||n?le.emit("cancel",t,Q,Q):le.emit("drop",t,r,Q,oe),j()}}function j(){var e=ie||W;I(),z(),e&&E.rm(e,"gu-transit"),ue&&clearTimeout(ue),le.dragging=!1,ae&&le.emit("out",e,ae,Q),le.emit("dragend",e),Q=W=ie=re=oe=ue=ae=null}function k(e,n){var t;return t=void 0!==n?n:J?oe:g(ie||W),e===Q&&t===re}function q(e,n,r){function o(){var o=t(i);if(o===!1)return!1;var u=H(i,e),c=V(i,u,n,r),a=k(i,c);return a?!0:fe.accepts(W,i,Q,c)}for(var i=e;i&&!o();)i=v(i);return i}function U(e){function n(e){le.emit(e,f,ae,Q)}function t(){s&&n("over")}function r(){ae&&n("out")}if(J){e.preventDefault();var o=y("clientX",e),i=y("clientY",e),u=o-Z,c=i-ee;J.style.left=u+"px",J.style.top=c+"px";var f=ie||W,l=a(J,o,i),d=q(l,o,i),s=null!==d&&d!==ae;(s||null===d)&&(r(),ae=d,t());var p=v(f);if(d===Q&&ie&&!fe.copySortSource)return void(p&&p.removeChild(f));var m,h=H(d,l);if(null!==h)m=V(d,h,o,i);else{if(fe.revertOnSpill!==!0||ie)return void(ie&&p&&p.removeChild(f));m=re,d=Q}(null===m&&s||m!==f&&m!==g(f))&&(oe=m,d.insertBefore(f,m),le.emit("shadow",f,d,Q))}}function _(e){E.rm(e,"gu-hide")}function F(e){le.dragging&&E.add(e,"gu-hide")}function K(){if(!J){var e=W.getBoundingClientRect();J=W.cloneNode(!0),J.style.width=d(e)+"px",J.style.height=s(e)+"px",E.rm(J,"gu-transit"),E.add(J,"gu-mirror"),fe.mirrorContainer.appendChild(J),o(S,"add","mousemove",U),E.add(fe.mirrorContainer,"gu-unselectable"),le.emit("cloned",J,W,"mirror")}}function z(){J&&(E.rm(fe.mirrorContainer,"gu-unselectable"),o(S,"remove","mousemove",U),v(J).removeChild(J),J=null)}function H(e,n){for(var t=n;t!==e&&v(t)!==e;)t=v(t);return t===S?null:t}function V(e,n,t,r){function o(){var n,o,i,u=e.children.length;for(n=0;u>n;n++){if(o=e.children[n],i=o.getBoundingClientRect(),c&&i.left+i.width/2>t)return o;if(!c&&i.top+i.height/2>r)return o}return null}function i(){var e=n.getBoundingClientRect();return u(c?t>e.left+d(e)/2:r>e.top+s(e)/2)}function u(e){return e?g(n):n}var c="horizontal"===fe.direction,a=n!==e?i():o();return a}function $(e,n){return"boolean"==typeof fe.copy?fe.copy:fe.copy(e,n)}var G=arguments.length;1===G&&Array.isArray(e)===!1&&(n=e,e=[]);var J,Q,W,Z,ee,ne,te,re,oe,ie,ue,ce,ae=null,fe=n||{};void 0===fe.moves&&(fe.moves=l),void 0===fe.accepts&&(fe.accepts=l),void 0===fe.invalid&&(fe.invalid=P),void 0===fe.containers&&(fe.containers=e||[]),void 0===fe.isContainer&&(fe.isContainer=f),void 0===fe.copy&&(fe.copy=!1),void 0===fe.copySortSource&&(fe.copySortSource=!1),void 0===fe.revertOnSpill&&(fe.revertOnSpill=!1),void 0===fe.removeOnSpill&&(fe.removeOnSpill=!1),void 0===fe.direction&&(fe.direction="vertical"),void 0===fe.ignoreInputTextSelection&&(fe.ignoreInputTextSelection=!0),void 0===fe.mirrorContainer&&(fe.mirrorContainer=x.body);var le=b({containers:fe.containers,start:Y,end:D,cancel:A,remove:R,destroy:h,canMove:X,dragging:!1});return fe.removeOnSpill===!0&&le.on("over",_).on("out",F),r(),le}function o(e,n,r,o){var i={mouseup:"touchend",mousedown:"touchstart",mousemove:"touchmove"},u={mouseup:"pointerup",mousedown:"pointerdown",mousemove:"pointermove"},c={mouseup:"MSPointerUp",mousedown:"MSPointerDown",mousemove:"MSPointerMove"};t.navigator.pointerEnabled?w[n](e,u[r],o):t.navigator.msPointerEnabled?w[n](e,c[r],o):(w[n](e,i[r],o),w[n](e,r,o))}function i(e){if(void 0!==e.touches)return e.touches.length;if(void 0!==e.which&&0!==e.which)return e.which;if(void 0!==e.buttons)return e.buttons;var n=e.button;return void 0!==n?1&n?1:2&n?3:4&n?2:0:void 0}function u(e){var n=e.getBoundingClientRect();return{left:n.left+c("scrollLeft","pageXOffset"),top:n.top+c("scrollTop","pageYOffset")}}function c(e,n){return"undefined"!=typeof t[n]?t[n]:S.clientHeight?S[e]:x.body[e]}function a(e,n,t){var r,o=e||{},i=o.className;return o.className+=" gu-hide",r=x.elementFromPoint(n,t),o.className=i,r}function f(){return!1}function l(){return!0}function d(e){return e.width||e.right-e.left}function s(e){return e.height||e.bottom-e.top}function v(e){return e.parentNode===x?null:e.parentNode}function p(e){return"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"SELECT"===e.tagName||m(e)}function m(e){return e?"false"===e.contentEditable?!1:"true"===e.contentEditable?!0:m(v(e)):!1}function g(e){function n(){var n=e;do n=n.nextSibling;while(n&&1!==n.nodeType);return n}return e.nextElementSibling||n()}function h(e){return e.targetTouches&&e.targetTouches.length?e.targetTouches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e}function y(e,n){var t=h(n),r={pageX:"clientX",pageY:"clientY"};return e in r&&!(e in t)&&r[e]in t&&(e=r[e]),t[e]}var b=e("contra/emitter"),w=e("crossvent"),E=e("./classes"),x=document,S=x.documentElement;n.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./classes":1,"contra/emitter":5,crossvent:6}],3:[function(e,n,t){n.exports=function(e,n){return Array.prototype.slice.call(e,n)}},{}],4:[function(e,n,t){"use strict";var r=e("ticky");n.exports=function(e,n,t){e&&r(function(){e.apply(t||null,n||[])})}},{ticky:9}],5:[function(e,n,t){"use strict";var r=e("atoa"),o=e("./debounce");n.exports=function(e,n){var t=n||{},i={};return void 0===e&&(e={}),e.on=function(n,t){return i[n]?i[n].push(t):i[n]=[t],e},e.once=function(n,t){return t._once=!0,e.on(n,t),e},e.off=function(n,t){var r=arguments.length;if(1===r)delete i[n];else if(0===r)i={};else{var o=i[n];if(!o)return e;o.splice(o.indexOf(t),1)}return e},e.emit=function(){var n=r(arguments);return e.emitterSnapshot(n.shift()).apply(this,n)},e.emitterSnapshot=function(n){var u=(i[n]||[]).slice(0);return function(){var i=r(arguments),c=this||e;if("error"===n&&t["throws"]!==!1&&!u.length)throw 1===i.length?i[0]:i;return u.forEach(function(r){t.async?o(r,i,c):r.apply(c,i),r._once&&e.off(n,r)}),e}},e}},{"./debounce":4,atoa:3}],6:[function(e,n,t){(function(t){"use strict";function r(e,n,t,r){return e.addEventListener(n,t,r)}function o(e,n,t){return e.attachEvent("on"+n,f(e,n,t))}function i(e,n,t,r){return e.removeEventListener(n,t,r)}function u(e,n,t){var r=l(e,n,t);return r?e.detachEvent("on"+n,r):void 0}function c(e,n,t){function r(){var e;return p.createEvent?(e=p.createEvent("Event"),e.initEvent(n,!0,!0)):p.createEventObject&&(e=p.createEventObject()),e}function o(){return new s(n,{detail:t})}var i=-1===v.indexOf(n)?o():r();e.dispatchEvent?e.dispatchEvent(i):e.fireEvent("on"+n,i)}function a(e,n,r){return function(n){var o=n||t.event;o.target=o.target||o.srcElement,o.preventDefault=o.preventDefault||function(){o.returnValue=!1},o.stopPropagation=o.stopPropagation||function(){o.cancelBubble=!0},o.which=o.which||o.keyCode,r.call(e,o)}}function f(e,n,t){var r=l(e,n,t)||a(e,n,t);return h.push({wrapper:r,element:e,type:n,fn:t}),r}function l(e,n,t){var r=d(e,n,t);if(r){var o=h[r].wrapper;return h.splice(r,1),o}}function d(e,n,t){var r,o;for(r=0;r<h.length;r++)if(o=h[r],o.element===e&&o.type===n&&o.fn===t)return r}var s=e("custom-event"),v=e("./eventmap"),p=t.document,m=r,g=i,h=[];t.addEventListener||(m=o,g=u),n.exports={add:m,remove:g,fabricate:c}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./eventmap":7,"custom-event":8}],7:[function(e,n,t){(function(e){"use strict";var t=[],r="",o=/^on/;for(r in e)o.test(r)&&t.push(r.slice(2));n.exports=t}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],8:[function(e,n,t){(function(e){function t(){try{var e=new r("cat",{detail:{foo:"bar"}});return"cat"===e.type&&"bar"===e.detail.foo}catch(n){}return!1}var r=e.CustomEvent;n.exports=t()?r:"function"==typeof document.createEvent?function(e,n){var t=document.createEvent("CustomEvent");return n?t.initCustomEvent(e,n.bubbles,n.cancelable,n.detail):t.initCustomEvent(e,!1,!1,void 0),t}:function(e,n){var t=document.createEventObject();return t.type=e,n?(t.bubbles=Boolean(n.bubbles),t.cancelable=Boolean(n.cancelable),t.detail=n.detail):(t.bubbles=!1,t.cancelable=!1,t.detail=void 0),t}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],9:[function(e,n,t){var r,o="function"==typeof setImmediate;r=o?function(e){setImmediate(e)}:function(e){setTimeout(e,0)},n.exports=r},{}]},{},[2])(2)});
